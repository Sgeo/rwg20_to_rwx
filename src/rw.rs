/* automatically generated by rust-bindgen */

pub const BUFSIZ : u32 = 4096 ; pub const _NFILES : u32 = 20 ; pub const FILENAME_MAX : u32 = 144 ; pub const FOPEN_MAX : u32 = 20 ; pub const OPEN_MAX : u32 = 20 ; pub const PATH_MAX : u32 = 143 ; pub const _READ : u32 = 1 ; pub const _WRITE : u32 = 2 ; pub const _UNGET : u32 = 4 ; pub const _BIGBUF : u32 = 8 ; pub const _EOF : u32 = 16 ; pub const _SFERR : u32 = 32 ; pub const _APPEND : u32 = 128 ; pub const _BINARY : u32 = 64 ; pub const _IOFBF : u32 = 256 ; pub const _IOLBF : u32 = 512 ; pub const _IONBF : u32 = 1024 ; pub const _TMPFIL : u32 = 2048 ; pub const _DIRTY : u32 = 4096 ; pub const _ISTTY : u32 = 8192 ; pub const _DYNAMIC : u32 = 16384 ; pub const _FILEEXT : u32 = 32768 ; pub const _COMMIT : u32 = 1 ; pub const EOF : i32 = -1 ; pub const SEEK_SET : u32 = 0 ; pub const SEEK_CUR : u32 = 1 ; pub const SEEK_END : u32 = 2 ; pub const _NOT_ORIENTED : u32 = 0 ; pub const _BYTE_ORIENTED : u32 = 1 ; pub const _WIDE_ORIENTED : u32 = 2 ; pub const L_tmpnam : u32 = 13 ; pub const _P_tmpdir : & 'static [ u8 ; 2usize ] = b"\\\0" ; pub const _wP_tmpdir : & 'static [ u8 ; 2usize ] = b"\\\0" ; pub const TMP_MAX : u32 = 17576 ; pub const FIX_MIN : u32 = 1 ; pub const FIX_MAX : u32 = 2147483647 ; pub const FALSE : u32 = 0 ; pub const rwPALETTELENGTH : u32 = 256 ; pub const rwCHUNKCAMERA : u32 = 1128353093 ; pub const rwCHUNKMATRIX : u32 = 1296127064 ; pub const rwCHUNKMATERIAL : u32 = 1296127058 ; pub const rwCHUNKPALETTE : u32 = 1346456652 ; pub const rwCHUNKRASTER : u32 = 1380012884 ; pub const rwCHUNKTEXTURE : u32 = 1413830741 ; pub const rwCHUNKCLUMP : u32 = 1129076045 ; pub const rwCHUNKLIGHT : u32 = 1279874117 ; pub const rwCHUNKSCENE : u32 = 1396917582 ; pub const rwCHUNKDATA : u32 = 1145132097 ; pub const rwCHUNKRECT : u32 = 1380270932 ; pub const rwCHUNKV3D : u32 = 1446200352 ; pub const rwCHUNKSTRING : u32 = 1398033991 ; pub const rwCHUNKUSER : u32 = 1515870810 ; pub const rwSAVECHUNKNORMALS : u32 = 1 ; pub const rwSAVECHUNKUVS : u32 = 2 ; pub const rwSAVECHUNKLUMINANCES : u32 = 4 ; pub const rwSAVECHUNKRASTERS : u32 = 8 ; pub const rwSAVECHUNKTAGS : u32 = 16 ; pub const rwSAVECHUNKALL : u32 = 31 ; pub const rwLOADCHUNKRASTERS : u32 = 8 ; pub const rwCAPABILITYZBUFFERED : u32 = 1 ; pub const rwCAPABILITYFLAT : u32 = 0 ; pub const rwCAPABILITYTEXTURED : u32 = 2 ; pub const rwCAPABILITYPCTEXTURED : u32 = 4 ; pub const rwNUMCAPABILITIES : u32 = 6 ; pub const rwFEATUREHWDOUBLEBUFFER : u32 = 1 ; pub const rwFEATUREPALETTEBASED : u32 = 2 ; pub const rwFEATUREHARDWARESUPPORT : u32 = 4 ; pub const rwFEATUREVARIABLEMAPSIZE : u32 = 8 ; pub const rwFEATUREMOUSESUPPORT : u32 = 16 ; pub const rwFEATUREZBUFFER : u32 = 32 ; pub const rwFEATURERESOLUTIONSWITCH : u32 = 64 ; pub const rwFEATUREDEPTHSWITCH : u32 = 128 ; pub const rwFEATUREINTERLACEDSTEREO : u32 = 256 ; pub const rwFEATUREPASSTHROUGHDEVICE : u32 = 512 ; pub const rwFEATUREMIPMAPS : u32 = 1024 ; pub const rwFEATURETRUEOPACITY : u32 = 2048 ; pub const rwFEATURECOLORFOG : u32 = 4096 ; pub const rwFEATUREGENERICHARDWARE : u32 = 8192 ; pub const rwCAPABILITYMODEOPACITY : u32 = 1 ; pub const rwCAPABILITYMODEGOURAUD : u32 = 2 ; pub const rwCAPABILITYMODEFULLGOURAUD : u32 = 4 ; pub const rwCAPABILITYMODETRANSPARENT : u32 = 8 ; pub const rwCAPABILITYMODEFILTERED : u32 = 16 ; pub const rwCAPABILITYMODELITTEXTURE : u32 = 32 ; pub const rwCAPABILITYMODEGOURAUDTEXTURE : u32 = 64 ; pub const rwIMMEDIATE3D : u32 = 0 ; pub const rwIMMEDIATE2D : u32 = 1 ; pub const rwIMMEDIATEVERTICES : u32 = 2 ; pub const rwHWDOUBLEBUFFER : u32 = 1 ; pub const rwHWWINDOWED : u32 = 2 ; pub const rwHWSECONDARY : u32 = 4 ; pub const RWMAXPATHLEN : u32 = 1024 ; pub const RWMAXSHAPEPATHLEN : u32 = 8192 ; pub const RWMAXDEVICELEN : u32 = 256 ; pub type _w_size_t = usize ; pub type __va_list = [ * mut :: std :: os :: raw :: c_char ; 1usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __stream_link { _unused : [ u8 ; 0 ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __iobuf { pub _ptr : * mut :: std :: os :: raw :: c_uchar , pub _cnt : :: std :: os :: raw :: c_int , pub _link : * mut __stream_link , pub _flag : :: std :: os :: raw :: c_uint , pub _handle : :: std :: os :: raw :: c_int , pub _bufsize : :: std :: os :: raw :: c_uint , pub _ungotten : :: std :: os :: raw :: c_ushort , } # [ test ] fn bindgen_test_layout___iobuf ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __iobuf > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( __iobuf ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __iobuf > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __iobuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __iobuf > ( ) ) ) . _ptr as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __iobuf ) , "::" , stringify ! ( _ptr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __iobuf > ( ) ) ) . _cnt as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __iobuf ) , "::" , stringify ! ( _cnt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __iobuf > ( ) ) ) . _link as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __iobuf ) , "::" , stringify ! ( _link ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __iobuf > ( ) ) ) . _flag as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __iobuf ) , "::" , stringify ! ( _flag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __iobuf > ( ) ) ) . _handle as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( __iobuf ) , "::" , stringify ! ( _handle ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __iobuf > ( ) ) ) . _bufsize as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __iobuf ) , "::" , stringify ! ( _bufsize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __iobuf > ( ) ) ) . _ungotten as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( __iobuf ) , "::" , stringify ! ( _ungotten ) ) ) ; } pub type FILE = __iobuf ; pub type fpos_t = :: std :: os :: raw :: c_long ; extern "C" { pub fn __get_iob_ptr ( ) -> * mut FILE ; } extern "C" { # [ link_name = "\u{1}__iob" ] pub static mut __iob : [ FILE ; 0usize ] ; } extern "C" { pub fn clearerr ( __fp : * mut FILE ) ; } extern "C" { pub fn fclose ( __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn feof ( __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ferror ( __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fflush ( __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetc ( __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetpos ( __fp : * mut FILE , __pos : * mut fpos_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgets ( __s : * mut :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_int , __fp : * mut FILE ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fopen ( __filename : * const :: std :: os :: raw :: c_char , __mode : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn fprintf ( __fp : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputc ( __c : :: std :: os :: raw :: c_int , __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputs ( __s : * const :: std :: os :: raw :: c_char , __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fread ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize , __n : usize , __fp : * mut FILE ) -> usize ; } extern "C" { pub fn freopen ( __filename : * const :: std :: os :: raw :: c_char , __mode : * const :: std :: os :: raw :: c_char , __fp : * mut FILE ) -> * mut FILE ; } extern "C" { pub fn fscanf ( __fp : * mut FILE , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fseek ( __fp : * mut FILE , __offset : :: std :: os :: raw :: c_long , __whence : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fsetpos ( __fp : * mut FILE , __pos : * const fpos_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftell ( __fp : * mut FILE ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn fwrite ( __ptr : * const :: std :: os :: raw :: c_void , __size : usize , __n : usize , __fp : * mut FILE ) -> usize ; } extern "C" { pub fn getc ( __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getchar ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn gets ( __s : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn perror ( __s : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn printf ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putc ( __c : :: std :: os :: raw :: c_int , __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putchar ( __c : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn puts ( __s : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn remove ( __filename : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rename ( __old : * const :: std :: os :: raw :: c_char , __new : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rewind ( __fp : * mut FILE ) ; } extern "C" { pub fn scanf ( __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setbuf ( __fp : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn setvbuf ( __fp : * mut FILE , __buf : * mut :: std :: os :: raw :: c_char , __mode : :: std :: os :: raw :: c_int , __size : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sprintf ( __s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sscanf ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn tmpfile ( ) -> * mut FILE ; } extern "C" { pub fn tmpnam ( __s : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ungetc ( __c : :: std :: os :: raw :: c_int , __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfprintf ( __fp : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vprintf ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsprintf ( __s : * mut :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _getw ( __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _pclose ( __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _popen ( __command : * const :: std :: os :: raw :: c_char , __mode : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn _putw ( __binint : :: std :: os :: raw :: c_int , __fp : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _tempnam ( __dir : * mut :: std :: os :: raw :: c_char , __prefix : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } pub type wchar_t = :: std :: os :: raw :: c_ushort ; pub type wint_t = wchar_t ; pub type wctype_t = wchar_t ; extern "C" { pub fn snprintf ( __buf : * mut :: std :: os :: raw :: c_char , __bufsize : usize , __fmt : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfscanf ( __fp : * mut FILE , __format : * const :: std :: os :: raw :: c_char , __arg : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vscanf ( __format : * const :: std :: os :: raw :: c_char , __arg : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsnprintf ( __s : * mut :: std :: os :: raw :: c_char , __bufsize : usize , __format : * const :: std :: os :: raw :: c_char , __arg : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsscanf ( __s : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , __arg : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getwc ( arg1 : * mut FILE ) -> wint_t ; } extern "C" { pub fn getwchar ( ) -> wint_t ; } extern "C" { pub fn fgetwc ( arg1 : * mut FILE ) -> wint_t ; } extern "C" { pub fn fgetws ( arg1 : * mut wchar_t , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut FILE ) -> * mut wchar_t ; } extern "C" { pub fn fputwc ( arg1 : wint_t , arg2 : * mut FILE ) -> wint_t ; } extern "C" { pub fn fputws ( arg1 : * const wchar_t , arg2 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fwprintf ( arg1 : * mut FILE , arg2 : * const wchar_t , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fwscanf ( arg1 : * mut FILE , arg2 : * const wchar_t , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putwc ( arg1 : wint_t , arg2 : * mut FILE ) -> wint_t ; } extern "C" { pub fn putwchar ( arg1 : wint_t ) -> wint_t ; } extern "C" { pub fn swprintf ( arg1 : * mut wchar_t , arg2 : usize , arg3 : * const wchar_t , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn swscanf ( arg1 : * const wchar_t , arg2 : * const wchar_t , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ungetwc ( arg1 : wint_t , arg2 : * mut FILE ) -> wint_t ; } extern "C" { pub fn vfwprintf ( arg1 : * mut FILE , arg2 : * const wchar_t , arg3 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfwscanf ( arg1 : * mut FILE , arg2 : * const wchar_t , arg3 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vswprintf ( arg1 : * mut wchar_t , arg2 : usize , arg3 : * const wchar_t , arg4 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vswscanf ( arg1 : * const wchar_t , arg2 : * const wchar_t , arg3 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vwprintf ( arg1 : * const wchar_t , arg2 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vwscanf ( arg1 : * const wchar_t , arg2 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn wprintf ( arg1 : * const wchar_t , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn wscanf ( arg1 : * const wchar_t , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fseeki64 ( __fp : * mut FILE , __offset : :: std :: os :: raw :: c_longlong , __whence : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _ftelli64 ( __fp : * mut FILE ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn flushall ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fdopen ( __handle : :: std :: os :: raw :: c_int , __mode : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn fdopen ( __handle : :: std :: os :: raw :: c_int , __mode : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn _bprintf ( __buf : * mut :: std :: os :: raw :: c_char , __bufsize : usize , __fmt : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fgetchar ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fileno ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fputchar ( __c : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fsopen ( __filename : * const :: std :: os :: raw :: c_char , __mode : * const :: std :: os :: raw :: c_char , __shflag : :: std :: os :: raw :: c_int ) -> * mut FILE ; } extern "C" { pub fn _grow_handles ( __new_count : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _snprintf ( __buf : * mut :: std :: os :: raw :: c_char , __bufsize : usize , __fmt : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _vbprintf ( __s : * mut :: std :: os :: raw :: c_char , __bufsize : usize , __format : * const :: std :: os :: raw :: c_char , __arg : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _vsnprintf ( __s : * mut :: std :: os :: raw :: c_char , __bufsize : usize , __format : * const :: std :: os :: raw :: c_char , __arg : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fcloseall ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetchar ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fileno ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputchar ( __c : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _bwprintf ( arg1 : * mut wchar_t , arg2 : usize , arg3 : * const wchar_t , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _fgetwchar ( ) -> wint_t ; } extern "C" { pub fn _fputwchar ( arg1 : wint_t ) -> wint_t ; } extern "C" { pub fn _getws ( arg1 : * mut wchar_t ) -> * mut wchar_t ; } extern "C" { pub fn _putws ( arg1 : * const wchar_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _snwprintf ( arg1 : * mut wchar_t , arg2 : usize , arg3 : * const wchar_t , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _swprintf ( arg1 : * mut wchar_t , arg2 : * const wchar_t , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _wfdopen ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const wchar_t ) -> * mut FILE ; } extern "C" { pub fn _wfopen ( arg1 : * const wchar_t , arg2 : * const wchar_t ) -> * mut FILE ; } extern "C" { pub fn _wfreopen ( arg1 : * const wchar_t , arg2 : * const wchar_t , arg3 : * mut FILE ) -> * mut FILE ; } extern "C" { pub fn _wfsopen ( __filename : * const wchar_t , __mode : * const wchar_t , __shflag : :: std :: os :: raw :: c_int ) -> * mut FILE ; } extern "C" { pub fn _wperror ( arg1 : * const wchar_t ) ; } extern "C" { pub fn _wpopen ( __command : * const wchar_t , __mode : * const wchar_t ) -> * mut FILE ; } extern "C" { pub fn _wremove ( arg1 : * const wchar_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _wrename ( arg1 : * const wchar_t , arg2 : * const wchar_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _wtempnam ( __dir : * mut wchar_t , __prefix : * mut wchar_t ) -> * mut wchar_t ; } extern "C" { pub fn _wtmpnam ( arg1 : * mut wchar_t ) -> * mut wchar_t ; } extern "C" { pub fn _vbwprintf ( arg1 : * mut wchar_t , arg2 : usize , arg3 : * const wchar_t , arg4 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _vsnwprintf ( arg1 : * mut wchar_t , arg2 : usize , arg3 : * const wchar_t , arg4 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _vswprintf ( arg1 : * mut wchar_t , arg2 : * const wchar_t , arg3 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetwchar ( ) -> wint_t ; } extern "C" { pub fn fputwchar ( arg1 : wint_t ) -> wint_t ; } extern "C" { pub fn getws ( arg1 : * mut wchar_t ) -> * mut wchar_t ; } extern "C" { pub fn putws ( arg1 : * const wchar_t ) -> :: std :: os :: raw :: c_int ; } pub type RwFixed = :: std :: os :: raw :: c_long ; pub type RwInt16 = :: std :: os :: raw :: c_short ; pub type RwUInt16 = :: std :: os :: raw :: c_ushort ; pub type RwInt32 = :: std :: os :: raw :: c_long ; pub type RwUInt32 = :: std :: os :: raw :: c_ulong ; pub type RwBool = RwInt32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwDepthCueColor { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_RwDepthCueColor ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwDepthCueColor > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwDepthCueColor ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwDepthCueColor > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwDepthCueColor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDepthCueColor > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwDepthCueColor ) , "::" , stringify ! ( rs0 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwDisplayDevice { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_RwDisplayDevice ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwDisplayDevice > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwDisplayDevice ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwDisplayDevice > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwDisplayDevice ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDisplayDevice > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwDisplayDevice ) , "::" , stringify ! ( rs0 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwPolyList { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_RwPolyList ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwPolyList > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwPolyList ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwPolyList > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwPolyList ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPolyList > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwPolyList ) , "::" , stringify ! ( rs0 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwMatrix4d { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_RwMatrix4d ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwMatrix4d > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwMatrix4d ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwMatrix4d > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwMatrix4d ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwMatrix4d > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwMatrix4d ) , "::" , stringify ! ( rs0 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _userdraw { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__userdraw ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _userdraw > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _userdraw ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _userdraw > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _userdraw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _userdraw > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _userdraw ) , "::" , stringify ! ( rs0 ) ) ) ; } pub type RwUserDraw = _userdraw ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _camera { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__camera ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _camera > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _camera ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _camera > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _camera ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _camera > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _camera ) , "::" , stringify ! ( rs0 ) ) ) ; } pub type RwCamera = _camera ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _lite { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__lite ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _lite > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _lite ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _lite > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _lite ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _lite > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _lite ) , "::" , stringify ! ( rs0 ) ) ) ; } pub type RwLight = _lite ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _clump { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__clump ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _clump > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _clump ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _clump > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _clump ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _clump > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _clump ) , "::" , stringify ! ( rs0 ) ) ) ; } pub type RwClump = _clump ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _rwpolygon { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__rwpolygon ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _rwpolygon > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _rwpolygon ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _rwpolygon > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _rwpolygon ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwpolygon > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _rwpolygon ) , "::" , stringify ! ( rs0 ) ) ) ; } pub type RwPolygon3d = _rwpolygon ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwFont { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_RwFont ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwFont > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwFont ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwFont > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwFont ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwFont > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwFont ) , "::" , stringify ! ( rs0 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwText { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_RwText ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwText > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwText ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwText > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwText ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwText > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwText ) , "::" , stringify ! ( rs0 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwSpline { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_RwSpline ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwSpline > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwSpline ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwSpline > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwSpline ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwSpline > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwSpline ) , "::" , stringify ! ( rs0 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwScene { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_RwScene ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwScene > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwScene ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwScene > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwScene ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwScene > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwScene ) , "::" , stringify ! ( rs0 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwRaster { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_RwRaster ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwRaster > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwRaster ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwRaster > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwRaster ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRaster > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwRaster ) , "::" , stringify ! ( rs0 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _RwTexture { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__RwTexture ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _RwTexture > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _RwTexture ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _RwTexture > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _RwTexture ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _RwTexture > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _RwTexture ) , "::" , stringify ! ( rs0 ) ) ) ; } pub type RwTexture = _RwTexture ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _rwmaterial { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__rwmaterial ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _rwmaterial > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _rwmaterial ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _rwmaterial > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _rwmaterial ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwmaterial > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _rwmaterial ) , "::" , stringify ! ( rs0 ) ) ) ; } pub type RwMaterial = _rwmaterial ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _rwstream { pub rs0 : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__rwstream ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _rwstream > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( _rwstream ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _rwstream > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _rwstream ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwstream > ( ) ) ) . rs0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _rwstream ) , "::" , stringify ! ( rs0 ) ) ) ; } pub type RwStream = _rwstream ; pub const RwRasterType_rwNARASTER : RwRasterType = 0 ; pub const RwRasterType_rwRASTERINDEXED : RwRasterType = 1 ; pub const RwRasterType_rwRASTERRGBA : RwRasterType = 2 ; pub const RwRasterType_rwRASTERZLESS : RwRasterType = 3 ; pub const RwRasterType_rwRASTERZGREATER : RwRasterType = 4 ; pub type RwRasterType = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwRasterInfo { pub type_ : RwInt32 , pub size : RwInt32 , pub redmask : RwInt32 , pub greenmask : RwInt32 , pub bluemask : RwInt32 , pub alphamask : RwInt32 , } # [ test ] fn bindgen_test_layout_RwRasterInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwRasterInfo > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( RwRasterInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwRasterInfo > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( RwRasterInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRasterInfo > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwRasterInfo ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRasterInfo > ( ) ) ) . size as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( RwRasterInfo ) , "::" , stringify ! ( size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRasterInfo > ( ) ) ) . redmask as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( RwRasterInfo ) , "::" , stringify ! ( redmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRasterInfo > ( ) ) ) . greenmask as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( RwRasterInfo ) , "::" , stringify ! ( greenmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRasterInfo > ( ) ) ) . bluemask as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( RwRasterInfo ) , "::" , stringify ! ( bluemask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRasterInfo > ( ) ) ) . alphamask as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( RwRasterInfo ) , "::" , stringify ! ( alphamask ) ) ) ; } pub const RwStreamType_rwNASTREAM : RwStreamType = 0 ; pub const RwStreamType_rwSTREAMFILE : RwStreamType = 1 ; pub const RwStreamType_rwSTREAMFILENAME : RwStreamType = 2 ; pub const RwStreamType_rwSTREAMMEMORY : RwStreamType = 3 ; pub type RwStreamType = u32 ; pub const RwStreamAccessType_rwNASTREAMACCESS : RwStreamAccessType = 0 ; pub const RwStreamAccessType_rwSTREAMREAD : RwStreamAccessType = 1 ; pub const RwStreamAccessType_rwSTREAMWRITE : RwStreamAccessType = 2 ; pub const RwStreamAccessType_rwSTREAMAPPEND : RwStreamAccessType = 3 ; pub type RwStreamAccessType = u32 ; pub const RwLightType_rwNALIGHTTYPE : RwLightType = 0 ; pub const RwLightType_rwDIRECTIONAL : RwLightType = 1 ; pub const RwLightType_rwPOINT : RwLightType = 2 ; pub const RwLightType_rwCONICAL : RwLightType = 3 ; pub type RwLightType = u32 ; pub const RwDepthCueType_rwNADEPTHCUETYPE : RwDepthCueType = 0 ; pub const RwDepthCueType_rwLINEAR : RwDepthCueType = 1 ; pub const RwDepthCueType_rwEXPONENTIAL : RwDepthCueType = 2 ; pub const RwDepthCueType_rwEXPONENTIALSQUARED : RwDepthCueType = 3 ; pub type RwDepthCueType = u32 ; pub const RwState_rwNASTATE : RwState = 0 ; pub const RwState_rwOFF : RwState = 1 ; pub const RwState_rwON : RwState = 2 ; pub type RwState = u32 ; pub const RwCameraProjection_rwNACAMERAPROJECTION : RwCameraProjection = 0 ; pub const RwCameraProjection_rwPERSPECTIVE : RwCameraProjection = 1 ; pub const RwCameraProjection_rwPARALLEL : RwCameraProjection = 2 ; pub type RwCameraProjection = u32 ; pub const RwCombineOperation_rwNACOMBINEOPERATION : RwCombineOperation = 0 ; pub const RwCombineOperation_rwREPLACE : RwCombineOperation = 1 ; pub const RwCombineOperation_rwPRECONCAT : RwCombineOperation = 2 ; pub const RwCombineOperation_rwPOSTCONCAT : RwCombineOperation = 3 ; pub type RwCombineOperation = u32 ; pub const RwLightSampling_rwNALIGHTSAMPLING : RwLightSampling = 0 ; pub const RwLightSampling_rwFACET : RwLightSampling = 1 ; pub const RwLightSampling_rwVERTEX : RwLightSampling = 2 ; pub type RwLightSampling = u32 ; pub const RwGeometrySampling_rwNAGEOMETRYSAMPLING : RwGeometrySampling = 0 ; pub const RwGeometrySampling_rwPOINTCLOUD : RwGeometrySampling = 1 ; pub const RwGeometrySampling_rwWIREFRAME : RwGeometrySampling = 2 ; pub const RwGeometrySampling_rwPOLYLINE : RwGeometrySampling = 3 ; pub const RwGeometrySampling_rwSOLID : RwGeometrySampling = 4 ; pub type RwGeometrySampling = u32 ; pub const RwSplineType_rwNASPLINETYPE : RwSplineType = 0 ; pub const RwSplineType_rwOPENLOOP : RwSplineType = 1 ; pub const RwSplineType_rwCLOSEDLOOP : RwSplineType = 2 ; pub type RwSplineType = u32 ; pub const RwSplinePath_rwNASPLINEPATH : RwSplinePath = 0 ; pub const RwSplinePath_rwSMOOTH : RwSplinePath = 1 ; pub const RwSplinePath_rwNICEENDS : RwSplinePath = 2 ; pub type RwSplinePath = u32 ; pub const RwSearchMode_rwNASEARCHMODE : RwSearchMode = 0 ; pub const RwSearchMode_rwLOCAL : RwSearchMode = 1 ; pub const RwSearchMode_rwGLOBAL : RwSearchMode = 2 ; pub type RwSearchMode = u32 ; pub const RwDebugSeverity_rwNADEBUGMESSAGESEVERITY : RwDebugSeverity = 0 ; pub const RwDebugSeverity_rwINFORM : RwDebugSeverity = 1 ; pub const RwDebugSeverity_rwWARNING : RwDebugSeverity = 2 ; pub const RwDebugSeverity_rwERROR : RwDebugSeverity = 3 ; pub type RwDebugSeverity = u32 ; pub const RwTextureDitherMode_rwNATEXTUREDITHER : RwTextureDitherMode = 0 ; pub const RwTextureDitherMode_rwDITHERON : RwTextureDitherMode = 1 ; pub const RwTextureDitherMode_rwDITHEROFF : RwTextureDitherMode = 2 ; pub const RwTextureDitherMode_rwAUTODITHER : RwTextureDitherMode = 3 ; pub type RwTextureDitherMode = u32 ; pub const RwStereoMode_rwNASTEREOMODE : RwStereoMode = 0 ; pub const RwStereoMode_rwSTEREONONE : RwStereoMode = 1 ; pub const RwStereoMode_rwSTEREOINTERLACEDRL : RwStereoMode = 2 ; pub const RwStereoMode_rwSTEREOINTERLACEDLR : RwStereoMode = 3 ; pub const RwStereoMode_rwSTEREOADJACENTRL : RwStereoMode = 4 ; pub const RwStereoMode_rwSTEREOADJACENTLR : RwStereoMode = 5 ; pub type RwStereoMode = u32 ; pub type RwPickObject = RwInt32 ; pub type RwClumpHints = RwUInt32 ; pub type RwTextureModes = RwUInt32 ; pub type RwMaterialModes = RwUInt32 ; pub type RwRasterOptions = RwUInt32 ; pub type RwPaletteOptions = RwUInt32 ; pub type RwUserDrawAlignmentTypes = RwUInt32 ; pub const RwUserDrawType_rwNAUSERDRAWTYPE : RwUserDrawType = 0 ; pub const RwUserDrawType_rwCLUMPALIGN : RwUserDrawType = 1 ; pub const RwUserDrawType_rwVERTEXALIGN : RwUserDrawType = 2 ; pub const RwUserDrawType_rwBBOXALIGN : RwUserDrawType = 3 ; pub const RwUserDrawType_rwVPALIGN : RwUserDrawType = 4 ; pub type RwUserDrawType = u32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwRect { pub x : RwInt32 , pub y : RwInt32 , pub w : RwInt32 , pub h : RwInt32 , } # [ test ] fn bindgen_test_layout_RwRect ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwRect > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( RwRect ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwRect > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( RwRect ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRect > ( ) ) ) . x as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwRect ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRect > ( ) ) ) . y as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( RwRect ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRect > ( ) ) ) . w as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( RwRect ) , "::" , stringify ! ( w ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRect > ( ) ) ) . h as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( RwRect ) , "::" , stringify ! ( h ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwV3d { pub x : f32 , pub y : f32 , pub z : f32 , } # [ test ] fn bindgen_test_layout_RwV3d ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwV3d > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( RwV3d ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwV3d > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( RwV3d ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwV3d > ( ) ) ) . x as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwV3d ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwV3d > ( ) ) ) . y as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( RwV3d ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwV3d > ( ) ) ) . z as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( RwV3d ) , "::" , stringify ! ( z ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwUV { pub u : f32 , pub v : f32 , } # [ test ] fn bindgen_test_layout_RwUV ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwUV > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwUV ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwUV > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( RwUV ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwUV > ( ) ) ) . u as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwUV ) , "::" , stringify ! ( u ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwUV > ( ) ) ) . v as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( RwUV ) , "::" , stringify ! ( v ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _rwmemory { pub start : * mut :: std :: os :: raw :: c_char , pub length : RwUInt32 , } # [ test ] fn bindgen_test_layout__rwmemory ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _rwmemory > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _rwmemory ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _rwmemory > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _rwmemory ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwmemory > ( ) ) ) . start as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _rwmemory ) , "::" , stringify ! ( start ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwmemory > ( ) ) ) . length as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _rwmemory ) , "::" , stringify ! ( length ) ) ) ; } pub type RwMemory = _rwmemory ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwRGBColor { pub r : f32 , pub g : f32 , pub b : f32 , } # [ test ] fn bindgen_test_layout_RwRGBColor ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwRGBColor > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( RwRGBColor ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwRGBColor > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( RwRGBColor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRGBColor > ( ) ) ) . r as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwRGBColor ) , "::" , stringify ! ( r ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRGBColor > ( ) ) ) . g as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( RwRGBColor ) , "::" , stringify ! ( g ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwRGBColor > ( ) ) ) . b as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( RwRGBColor ) , "::" , stringify ! ( b ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwPaletteEntry { pub r : :: std :: os :: raw :: c_uchar , pub g : :: std :: os :: raw :: c_uchar , pub b : :: std :: os :: raw :: c_uchar , pub flags : :: std :: os :: raw :: c_uchar , } # [ test ] fn bindgen_test_layout_RwPaletteEntry ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwPaletteEntry > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( RwPaletteEntry ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwPaletteEntry > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( RwPaletteEntry ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPaletteEntry > ( ) ) ) . r as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwPaletteEntry ) , "::" , stringify ! ( r ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPaletteEntry > ( ) ) ) . g as * const _ as usize } , 1usize , concat ! ( "Offset of field: " , stringify ! ( RwPaletteEntry ) , "::" , stringify ! ( g ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPaletteEntry > ( ) ) ) . b as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( RwPaletteEntry ) , "::" , stringify ! ( b ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPaletteEntry > ( ) ) ) . flags as * const _ as usize } , 3usize , concat ! ( "Offset of field: " , stringify ! ( RwPaletteEntry ) , "::" , stringify ! ( flags ) ) ) ; } pub type RwPalette = [ RwPaletteEntry ; 256usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwPickVertexData { pub vindex : RwInt32 , pub d2 : RwInt32 , } # [ test ] fn bindgen_test_layout_RwPickVertexData ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwPickVertexData > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( RwPickVertexData ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwPickVertexData > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( RwPickVertexData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPickVertexData > ( ) ) ) . vindex as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwPickVertexData ) , "::" , stringify ! ( vindex ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPickVertexData > ( ) ) ) . d2 as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( RwPickVertexData ) , "::" , stringify ! ( d2 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwPickClumpData { pub clump : * mut _clump , pub polygon : * mut _rwpolygon , pub vertex : RwPickVertexData , pub wcpoint : RwV3d , } # [ test ] fn bindgen_test_layout_RwPickClumpData ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwPickClumpData > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( RwPickClumpData ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwPickClumpData > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwPickClumpData ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPickClumpData > ( ) ) ) . clump as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwPickClumpData ) , "::" , stringify ! ( clump ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPickClumpData > ( ) ) ) . polygon as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( RwPickClumpData ) , "::" , stringify ! ( polygon ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPickClumpData > ( ) ) ) . vertex as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( RwPickClumpData ) , "::" , stringify ! ( vertex ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPickClumpData > ( ) ) ) . wcpoint as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( RwPickClumpData ) , "::" , stringify ! ( wcpoint ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct RwPickRecord { pub type_ : RwPickObject , pub object : RwPickRecord__bindgen_ty_1 , } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union RwPickRecord__bindgen_ty_1 { pub clump : RwPickClumpData , pub vertex : RwPickVertexData , _bindgen_union_align : [ u64 ; 5usize ] , } # [ test ] fn bindgen_test_layout_RwPickRecord__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwPickRecord__bindgen_ty_1 > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( RwPickRecord__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwPickRecord__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwPickRecord__bindgen_ty_1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPickRecord__bindgen_ty_1 > ( ) ) ) . clump as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwPickRecord__bindgen_ty_1 ) , "::" , stringify ! ( clump ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPickRecord__bindgen_ty_1 > ( ) ) ) . vertex as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwPickRecord__bindgen_ty_1 ) , "::" , stringify ! ( vertex ) ) ) ; } # [ test ] fn bindgen_test_layout_RwPickRecord ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwPickRecord > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( RwPickRecord ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwPickRecord > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwPickRecord ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPickRecord > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwPickRecord ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwPickRecord > ( ) ) ) . object as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( RwPickRecord ) , "::" , stringify ! ( object ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct RwDeviceCapabilities { pub device_name : [ :: std :: os :: raw :: c_char ; 80usize ] , pub num_names : RwUInt32 , pub version_major : RwUInt32 , pub version_minor : RwUInt32 , pub version_release : RwUInt32 , pub display_depth : RwUInt32 , pub zbuffer_depth : RwUInt32 , pub default_map_size : RwUInt32 , pub max_map_tiling : RwUInt32 , pub small_map_size : RwUInt32 , pub max_small_map_tiling : RwUInt32 , pub features : RwUInt32 , pub capabilities : [ RwUInt32 ; 6usize ] , pub hardware_capabilities : [ RwUInt32 ; 6usize ] , } # [ test ] fn bindgen_test_layout_RwDeviceCapabilities ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwDeviceCapabilities > ( ) , 172usize , concat ! ( "Size of: " , stringify ! ( RwDeviceCapabilities ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwDeviceCapabilities > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( RwDeviceCapabilities ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . device_name as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( device_name ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . num_names as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( num_names ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . version_major as * const _ as usize } , 84usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( version_major ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . version_minor as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( version_minor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . version_release as * const _ as usize } , 92usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( version_release ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . display_depth as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( display_depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . zbuffer_depth as * const _ as usize } , 100usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( zbuffer_depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . default_map_size as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( default_map_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . max_map_tiling as * const _ as usize } , 108usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( max_map_tiling ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . small_map_size as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( small_map_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . max_small_map_tiling as * const _ as usize } , 116usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( max_small_map_tiling ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . features as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( features ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . capabilities as * const _ as usize } , 124usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( capabilities ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwDeviceCapabilities > ( ) ) ) . hardware_capabilities as * const _ as usize } , 148usize , concat ! ( "Offset of field: " , stringify ! ( RwDeviceCapabilities ) , "::" , stringify ! ( hardware_capabilities ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwImmV2d { pub _d0 : [ RwInt32 ; 2usize ] , pub cameraz : f32 , pub x : RwFixed , pub y : RwFixed , pub z : RwFixed , } # [ test ] fn bindgen_test_layout_RwImmV2d ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwImmV2d > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( RwImmV2d ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwImmV2d > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( RwImmV2d ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmV2d > ( ) ) ) . _d0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwImmV2d ) , "::" , stringify ! ( _d0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmV2d > ( ) ) ) . cameraz as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( RwImmV2d ) , "::" , stringify ! ( cameraz ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmV2d > ( ) ) ) . x as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( RwImmV2d ) , "::" , stringify ! ( x ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmV2d > ( ) ) ) . y as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( RwImmV2d ) , "::" , stringify ! ( y ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmV2d > ( ) ) ) . z as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( RwImmV2d ) , "::" , stringify ! ( z ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwImmVertex3d { pub p3d : RwV3d , pub p2d : RwImmV2d , pub _d5 : f32 , pub _d6 : f32 , pub _d7 : f32 , pub _d8 : f32 , pub _d9 : f32 , pub _dA : f32 , pub _dB : f32 , pub _dC : f32 , pub _dD : f32 , pub flag : :: std :: os :: raw :: c_uchar , pub _d1 : [ :: std :: os :: raw :: c_char ; 3usize ] , pub _d2 : RwV3d , pub lum : RwFixed , pub lumg : RwFixed , pub lumb : RwFixed , pub texu : RwInt32 , pub texv : RwInt32 , pub vertex : RwInt32 , pub _d4 : * mut * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_RwImmVertex3d ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwImmVertex3d > ( ) , 120usize , concat ! ( "Size of: " , stringify ! ( RwImmVertex3d ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwImmVertex3d > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwImmVertex3d ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . p3d as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( p3d ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . p2d as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( p2d ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _d5 as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _d5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _d6 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _d6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _d7 as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _d7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _d8 as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _d8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _d9 as * const _ as usize } , 52usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _d9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _dA as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _dA ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _dB as * const _ as usize } , 60usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _dB ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _dC as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _dC ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _dD as * const _ as usize } , 68usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _dD ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . flag as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( flag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _d1 as * const _ as usize } , 73usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _d1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _d2 as * const _ as usize } , 76usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _d2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . lum as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( lum ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . lumg as * const _ as usize } , 92usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( lumg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . lumb as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( lumb ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . texu as * const _ as usize } , 100usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( texu ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . texv as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( texv ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . vertex as * const _ as usize } , 108usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( vertex ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmVertex3d > ( ) ) ) . _d4 as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( RwImmVertex3d ) , "::" , stringify ! ( _d4 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwImmPolygon3d { pub material : * mut _rwmaterial , pub lum : RwFixed , pub lumg : RwFixed , pub lumb : RwFixed , pub _d3 : [ RwInt32 ; 11usize ] , pub _d4 : [ * mut :: std :: os :: raw :: c_void ; 3usize ] , } # [ test ] fn bindgen_test_layout_RwImmPolygon3d ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwImmPolygon3d > ( ) , 88usize , concat ! ( "Size of: " , stringify ! ( RwImmPolygon3d ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwImmPolygon3d > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwImmPolygon3d ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmPolygon3d > ( ) ) ) . material as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwImmPolygon3d ) , "::" , stringify ! ( material ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmPolygon3d > ( ) ) ) . lum as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( RwImmPolygon3d ) , "::" , stringify ! ( lum ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmPolygon3d > ( ) ) ) . lumg as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( RwImmPolygon3d ) , "::" , stringify ! ( lumg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmPolygon3d > ( ) ) ) . lumb as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( RwImmPolygon3d ) , "::" , stringify ! ( lumb ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmPolygon3d > ( ) ) ) . _d3 as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( RwImmPolygon3d ) , "::" , stringify ! ( _d3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwImmPolygon3d > ( ) ) ) . _d4 as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( RwImmPolygon3d ) , "::" , stringify ! ( _d4 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _rwimmediate { pub type_ : RwInt32 , pub zbuffer : RwBool , pub vertex : [ RwImmVertex3d ; 3usize ] , pub poly : RwImmPolygon3d , } # [ test ] fn bindgen_test_layout__rwimmediate ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _rwimmediate > ( ) , 456usize , concat ! ( "Size of: " , stringify ! ( _rwimmediate ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _rwimmediate > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _rwimmediate ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwimmediate > ( ) ) ) . type_ as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _rwimmediate ) , "::" , stringify ! ( type_ ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwimmediate > ( ) ) ) . zbuffer as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _rwimmediate ) , "::" , stringify ! ( zbuffer ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwimmediate > ( ) ) ) . vertex as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _rwimmediate ) , "::" , stringify ! ( vertex ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwimmediate > ( ) ) ) . poly as * const _ as usize } , 368usize , concat ! ( "Offset of field: " , stringify ! ( _rwimmediate ) , "::" , stringify ! ( poly ) ) ) ; } pub type RwImmediate = _rwimmediate ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _rwvideomode { pub width : RwUInt32 , pub height : RwUInt32 , pub depth : RwUInt32 , pub accessible : RwBool , pub flags : RwUInt32 , } # [ test ] fn bindgen_test_layout__rwvideomode ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _rwvideomode > ( ) , 20usize , concat ! ( "Size of: " , stringify ! ( _rwvideomode ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _rwvideomode > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( _rwvideomode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwvideomode > ( ) ) ) . width as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _rwvideomode ) , "::" , stringify ! ( width ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwvideomode > ( ) ) ) . height as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( _rwvideomode ) , "::" , stringify ! ( height ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwvideomode > ( ) ) ) . depth as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _rwvideomode ) , "::" , stringify ! ( depth ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwvideomode > ( ) ) ) . accessible as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( _rwvideomode ) , "::" , stringify ! ( accessible ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _rwvideomode > ( ) ) ) . flags as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _rwvideomode ) , "::" , stringify ! ( flags ) ) ) ; } pub type RwVideoMode = _rwvideomode ; pub type RwStdlibFuncMalloc = :: std :: option :: Option < unsafe extern "C" fn ( size : usize ) -> * mut :: std :: os :: raw :: c_void > ; pub type RwStdlibFuncCalloc = :: std :: option :: Option < unsafe extern "C" fn ( size : usize , count : usize ) -> * mut :: std :: os :: raw :: c_void > ; pub type RwStdlibFuncRealloc = :: std :: option :: Option < unsafe extern "C" fn ( ptr : * mut :: std :: os :: raw :: c_void , size : usize ) -> * mut :: std :: os :: raw :: c_void > ; pub type RwStdlibFuncFree = :: std :: option :: Option < unsafe extern "C" fn ( ptr : * mut :: std :: os :: raw :: c_void ) > ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct RwStdlib { pub rwmalloc : RwStdlibFuncMalloc , pub rwcalloc : RwStdlibFuncCalloc , pub rwrealloc : RwStdlibFuncRealloc , pub rwfree : RwStdlibFuncFree , } # [ test ] fn bindgen_test_layout_RwStdlib ( ) { assert_eq ! ( :: std :: mem :: size_of :: < RwStdlib > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( RwStdlib ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < RwStdlib > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( RwStdlib ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwStdlib > ( ) ) ) . rwmalloc as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( RwStdlib ) , "::" , stringify ! ( rwmalloc ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwStdlib > ( ) ) ) . rwcalloc as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( RwStdlib ) , "::" , stringify ! ( rwcalloc ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwStdlib > ( ) ) ) . rwrealloc as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( RwStdlib ) , "::" , stringify ! ( rwrealloc ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < RwStdlib > ( ) ) ) . rwfree as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( RwStdlib ) , "::" , stringify ! ( rwfree ) ) ) ; } pub type RwClumpPredicateVoid = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _clump ) -> RwInt32 > ; pub type RwClumpPredicateInt = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _clump , arg : RwInt32 ) -> RwInt32 > ; pub type RwClumpPredicateLong = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _clump , arg : RwInt32 ) -> RwInt32 > ; pub type RwClumpPredicateReal = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _clump , arg : f32 ) -> RwInt32 > ; pub type RwClumpPredicatePointer = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _clump , arg : * mut :: std :: os :: raw :: c_void ) -> RwInt32 > ; pub type RwClumpFuncVoid = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _clump ) -> * mut _clump > ; pub type RwClumpFuncInt = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _clump , arg : RwInt32 ) -> * mut _clump > ; pub type RwClumpFuncLong = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _clump , arg : RwInt32 ) -> * mut _clump > ; pub type RwClumpFuncReal = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _clump , arg : f32 ) -> * mut _clump > ; pub type RwClumpFuncPointer = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _clump , arg : * mut :: std :: os :: raw :: c_void ) -> * mut _clump > ; pub type RwLightFuncVoid = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _lite ) -> * mut _lite > ; pub type RwLightFuncInt = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _lite , arg : RwInt32 ) -> * mut _lite > ; pub type RwLightFuncLong = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _lite , arg : RwInt32 ) -> * mut _lite > ; pub type RwLightFuncReal = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _lite , arg : f32 ) -> * mut _lite > ; pub type RwLightFuncPointer = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _lite , arg : * mut :: std :: os :: raw :: c_void ) -> * mut _lite > ; pub type RwPolygon3dFuncVoid = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _rwpolygon ) -> * mut _rwpolygon > ; pub type RwPolygon3dFuncInt = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _rwpolygon , arg : RwInt32 ) -> * mut _rwpolygon > ; pub type RwPolygon3dFuncLong = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _rwpolygon , arg : RwInt32 ) -> * mut _rwpolygon > ; pub type RwPolygon3dFuncReal = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _rwpolygon , arg : f32 ) -> * mut _rwpolygon > ; pub type RwPolygon3dFuncPointer = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _rwpolygon , arg : * mut :: std :: os :: raw :: c_void ) -> * mut _rwpolygon > ; pub type RwTextureFuncVoid = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _RwTexture ) -> * mut _RwTexture > ; pub type RwTextureFuncInt = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _RwTexture , arg : RwInt32 ) -> * mut _RwTexture > ; pub type RwTextureFuncLong = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _RwTexture , arg : RwInt32 ) -> * mut _RwTexture > ; pub type RwTextureFuncReal = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _RwTexture , arg : f32 ) -> * mut _RwTexture > ; pub type RwTextureFuncPointer = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _RwTexture , arg : * mut :: std :: os :: raw :: c_void ) -> * mut _RwTexture > ; pub type RwUserDrawFuncVoid = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _userdraw ) -> * mut _userdraw > ; pub type RwUserDrawFuncInt = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _userdraw , arg : RwInt32 ) -> * mut _userdraw > ; pub type RwUserDrawFuncLong = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _userdraw , arg : RwInt32 ) -> * mut _userdraw > ; pub type RwUserDrawFuncReal = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _userdraw , arg : f32 ) -> * mut _userdraw > ; pub type RwUserDrawFuncPointer = :: std :: option :: Option < unsafe extern "C" fn ( target : * mut _userdraw , arg : * mut :: std :: os :: raw :: c_void ) -> * mut _userdraw > ; pub type RwClumpCallBack = :: std :: option :: Option < unsafe extern "C" fn ( clump : * mut _clump ) > ; pub type RwUserDrawCallBack = :: std :: option :: Option < unsafe extern "C" fn ( userdraw : * mut _userdraw , ddimage : * mut :: std :: os :: raw :: c_void , rect : * mut RwRect , data : * mut :: std :: os :: raw :: c_void ) -> * mut _userdraw > ; pub type RwCameraShowCallBack = :: std :: option :: Option < unsafe extern "C" fn ( camera : * mut _camera , rect : * mut RwRect ) > ; pub const RwAxisAlignment_rwNAAXISALIGNMENT : RwAxisAlignment = 0 ; pub const RwAxisAlignment_rwNOAXISALIGNMENT : RwAxisAlignment = 1 ; pub const RwAxisAlignment_rwALIGNAXISZORIENTX : RwAxisAlignment = 2 ; pub const RwAxisAlignment_rwALIGNAXISZORIENTY : RwAxisAlignment = 3 ; pub const RwAxisAlignment_rwALIGNAXISXYZ : RwAxisAlignment = 4 ; pub type RwAxisAlignment = u32 ; pub const RwSystemInfo_rwNASYSTEMINFO : RwSystemInfo = 0 ; pub const RwSystemInfo_rwVERSIONSTRING : RwSystemInfo = 1 ; pub const RwSystemInfo_rwVERSIONMAJOR : RwSystemInfo = 2 ; pub const RwSystemInfo_rwVERSIONMINOR : RwSystemInfo = 3 ; pub const RwSystemInfo_rwVERSIONRELEASE : RwSystemInfo = 4 ; pub const RwSystemInfo_rwFIXEDPOINTLIB : RwSystemInfo = 5 ; pub const RwSystemInfo_rwDEBUGGINGLIB : RwSystemInfo = 6 ; pub type RwSystemInfo = u32 ; pub type RwDeviceInfo = RwUInt32 ; pub type RwDeviceAction = RwUInt32 ; pub type RwOpenOption = RwUInt32 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _openargument { pub option : RwOpenOption , pub value : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout__openargument ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _openargument > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _openargument ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _openargument > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _openargument ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _openargument > ( ) ) ) . option as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _openargument ) , "::" , stringify ! ( option ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _openargument > ( ) ) ) . value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _openargument ) , "::" , stringify ! ( value ) ) ) ; } pub type RwOpenArgument = _openargument ; pub const RwErrorCode_E_RW_NOERROR : RwErrorCode = 0 ; pub const RwErrorCode_E_RW_NULLP : RwErrorCode = 1 ; pub const RwErrorCode_E_RW_INVCOP : RwErrorCode = 2 ; pub const RwErrorCode_E_RW_NOMEM : RwErrorCode = 3 ; pub const RwErrorCode_E_RW_RSPARSE : RwErrorCode = 4 ; pub const RwErrorCode_E_RW_RSREAD : RwErrorCode = 5 ; pub const RwErrorCode_E_RW_WSWRITE : RwErrorCode = 6 ; pub const RwErrorCode_E_RW_DEGEN : RwErrorCode = 7 ; pub const RwErrorCode_E_RW_INVLIGHT : RwErrorCode = 8 ; pub const RwErrorCode_E_RW_SHPPATH : RwErrorCode = 9 ; pub const RwErrorCode_E_RW_READ : RwErrorCode = 10 ; pub const RwErrorCode_E_RW_RANGE : RwErrorCode = 11 ; pub const RwErrorCode_E_RW_WRITE : RwErrorCode = 12 ; pub const RwErrorCode_E_RW_NOFILE : RwErrorCode = 13 ; pub const RwErrorCode_E_RW_BADOPEN : RwErrorCode = 14 ; pub const RwErrorCode_E_RW_NOTROOT : RwErrorCode = 15 ; pub const RwErrorCode_E_RW_INVSPP : RwErrorCode = 16 ; pub const RwErrorCode_E_RW_INVSPT : RwErrorCode = 17 ; pub const RwErrorCode_E_RW_INVDEVICE : RwErrorCode = 18 ; pub const RwErrorCode_E_RW_INVMATERIAL : RwErrorCode = 19 ; pub const RwErrorCode_E_RW_INVFRAME : RwErrorCode = 20 ; pub const RwErrorCode_E_RW_INVFRAMESTEP : RwErrorCode = 21 ; pub const RwErrorCode_E_RW_INVTEXTUREWIDTH : RwErrorCode = 22 ; pub const RwErrorCode_E_RW_INVTEXTUREHEIGHT : RwErrorCode = 23 ; pub const RwErrorCode_E_RW_INVTEXTUREDEPTH : RwErrorCode = 24 ; pub const RwErrorCode_E_RW_INVVERTEXINDEX : RwErrorCode = 25 ; pub const RwErrorCode_E_RW_DEFSCENE : RwErrorCode = 26 ; pub const RwErrorCode_E_RW_INVGEOMETRYSAMPLING : RwErrorCode = 27 ; pub const RwErrorCode_E_RW_RSINVGEOMETRYSAMPLING : RwErrorCode = 28 ; pub const RwErrorCode_E_RW_INVLIGHTSAMPLING : RwErrorCode = 29 ; pub const RwErrorCode_E_RW_RSINVLIGHTSAMPLING : RwErrorCode = 30 ; pub const RwErrorCode_E_RW_NOPROTOTYPEFOUND : RwErrorCode = 31 ; pub const RwErrorCode_E_RW_ZEROVEC : RwErrorCode = 32 ; pub const RwErrorCode_E_RW_NESTEDMODEL : RwErrorCode = 33 ; pub const RwErrorCode_E_RW_NOMATCHBEGIN : RwErrorCode = 34 ; pub const RwErrorCode_E_RW_NOMATCHEND : RwErrorCode = 35 ; pub const RwErrorCode_E_RW_NESTEDPROTOTYPE : RwErrorCode = 36 ; pub const RwErrorCode_E_RW_NOMODELBEGIN : RwErrorCode = 37 ; pub const RwErrorCode_E_RW_INVPROTOTYPE : RwErrorCode = 38 ; pub const RwErrorCode_E_RW_NOCLUMP : RwErrorCode = 39 ; pub const RwErrorCode_E_RW_NOCLUMPBUILT : RwErrorCode = 40 ; pub const RwErrorCode_E_RW_DEGENPOLYGON : RwErrorCode = 41 ; pub const RwErrorCode_E_RW_COMPLEXPOLYGON : RwErrorCode = 42 ; pub const RwErrorCode_E_RW_TEXTURENOTFOUND : RwErrorCode = 43 ; pub const RwErrorCode_E_RW_INVTEXTURENAME : RwErrorCode = 44 ; pub const RwErrorCode_E_RW_INVCAMERAPROJECTION : RwErrorCode = 45 ; pub const RwErrorCode_E_RW_INVSTATE : RwErrorCode = 46 ; pub const RwErrorCode_E_RW_INVSEARCHMODE : RwErrorCode = 47 ; pub const RwErrorCode_E_RW_INVHINT : RwErrorCode = 48 ; pub const RwErrorCode_E_RW_USER : RwErrorCode = 49 ; pub const RwErrorCode_E_RW_INVAXISALIGNMENT : RwErrorCode = 50 ; pub const RwErrorCode_E_RW_INVUSERDRAWTYPE : RwErrorCode = 51 ; pub const RwErrorCode_E_RW_INVUSERDRAWALIGN : RwErrorCode = 52 ; pub const RwErrorCode_E_RW_RSINVTRACESTATE : RwErrorCode = 53 ; pub const RwErrorCode_E_RW_RSINVHINT : RwErrorCode = 54 ; pub const RwErrorCode_E_RW_RSINVAXISALIGNMENT : RwErrorCode = 55 ; pub const RwErrorCode_E_RW_INVSYSTEMINFO : RwErrorCode = 56 ; pub const RwErrorCode_E_RW_INVTEXTUREMODE : RwErrorCode = 57 ; pub const RwErrorCode_E_RW_RSINVTEXTUREMODE : RwErrorCode = 58 ; pub const RwErrorCode_E_RW_RSNOHINTS : RwErrorCode = 59 ; pub const RwErrorCode_E_RW_RSNOTEXTUREMODES : RwErrorCode = 60 ; pub const RwErrorCode_E_RW_INVRASTEROPTIONS : RwErrorCode = 61 ; pub const RwErrorCode_E_RW_INVTEXTUREDITHERMODE : RwErrorCode = 62 ; pub const RwErrorCode_E_RW_INVRASTERSIZE : RwErrorCode = 63 ; pub const RwErrorCode_E_RW_INVDEVICEINFO : RwErrorCode = 64 ; pub const RwErrorCode_E_RW_INVDEVICEACTION : RwErrorCode = 65 ; pub const RwErrorCode_E_RW_INVOPENOPTION : RwErrorCode = 66 ; pub const RwErrorCode_E_RW_RASTERINUSE : RwErrorCode = 67 ; pub const RwErrorCode_E_RW_RSINVDITHERMODE : RwErrorCode = 68 ; pub const RwErrorCode_E_RW_RSINVGAMMAMODE : RwErrorCode = 69 ; pub const RwErrorCode_E_RW_INVIMAGEFILE : RwErrorCode = 70 ; pub const RwErrorCode_E_RW_INVBUFFERSIZE : RwErrorCode = 71 ; pub const RwErrorCode_E_RW_INVMATERIALMODE : RwErrorCode = 72 ; pub const RwErrorCode_E_RW_RSINVMATERIALMODE : RwErrorCode = 73 ; pub const RwErrorCode_E_RW_RSNOMATERIALMODES : RwErrorCode = 74 ; pub const RwErrorCode_E_RW_INVPOLYGONINDEX : RwErrorCode = 75 ; pub const RwErrorCode_E_RW_CLUMPHASCOMPLEXPOLYGONS : RwErrorCode = 76 ; pub const RwErrorCode_E_RW_DEVICENOTFOUND : RwErrorCode = 77 ; pub const RwErrorCode_E_RW_DEVICEALREADYSTARTED : RwErrorCode = 78 ; pub const RwErrorCode_E_RW_UNABLETOSTARTDEVICE : RwErrorCode = 79 ; pub const RwErrorCode_E_RW_DEVICEINCORRECTVERSION : RwErrorCode = 80 ; pub const RwErrorCode_E_RW_DEVICENOTSTARTED : RwErrorCode = 81 ; pub const RwErrorCode_E_RW_NODEVICESPECIFIED : RwErrorCode = 82 ; pub const RwErrorCode_E_RW_NOSUITABLEDEVICE : RwErrorCode = 83 ; pub const RwErrorCode_E_RW_NODEVICESAVAILABLE : RwErrorCode = 84 ; pub const RwErrorCode_E_RW_LIBRARYNOTINITIALIZED : RwErrorCode = 85 ; pub const RwErrorCode_E_RW_INVSTREAMACCESSTYPE : RwErrorCode = 86 ; pub const RwErrorCode_E_RW_INVSTREAMTYPE : RwErrorCode = 87 ; pub const RwErrorCode_E_RW_ENDOFSTREAM : RwErrorCode = 88 ; pub const RwErrorCode_E_RW_INVCHUNKTYPE : RwErrorCode = 89 ; pub const RwErrorCode_E_RW_INVCHUNKSTRUCTURE : RwErrorCode = 90 ; pub const RwErrorCode_E_RW_NOTAUSERCREATEDRASTER : RwErrorCode = 91 ; pub const RwErrorCode_E_RW_ENVMAPOUTSIDECAMERAUPDATE : RwErrorCode = 92 ; pub const RwErrorCode_E_RW_TEXTUREHASNONAME : RwErrorCode = 93 ; pub const RwErrorCode_E_RW_TEXTURENOTINDICTIONARY : RwErrorCode = 94 ; pub const RwErrorCode_E_RW_INVALIDDEVICEFEATURE : RwErrorCode = 95 ; pub const RwErrorCode_E_RW_NOVISIBLEZBUFFER : RwErrorCode = 96 ; pub const RwErrorCode_E_RW_INVALIDSTDLIBFUNCSET : RwErrorCode = 97 ; pub const RwErrorCode_E_RW_INTERNAL : RwErrorCode = 98 ; pub const RwErrorCode_E_RW_MAXERROR : RwErrorCode = 99 ; pub type RwErrorCode = u32 ; extern "C" { pub fn RwGetError ( ) -> RwErrorCode ; } extern "C" { pub fn RwGetInternalError ( ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn RwSetUserError ( ) ; } extern "C" { pub fn RwAddChildToClump ( clump : * mut RwClump , child : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwAddClumpToScene ( arg1 : * mut RwScene , arg2 : * mut RwClump ) -> * mut RwScene ; } extern "C" { pub fn RwAddHint ( hint : RwClumpHints ) -> RwInt32 ; } extern "C" { pub fn RwAddHintToClump ( clump : * mut RwClump , hint : RwClumpHints ) -> * mut RwClump ; } extern "C" { pub fn RwAddLightToScene ( arg1 : * mut RwScene , arg2 : * mut RwLight ) -> * mut RwScene ; } extern "C" { pub fn RwAddMaterialModeToMaterial ( m : * mut RwMaterial , mode : RwMaterialModes ) -> * mut RwMaterial ; } extern "C" { pub fn RwAddMaterialModeToPolygon ( apol : * mut RwPolygon3d , mode : RwMaterialModes ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwAddMaterialModeToSurface ( mode : RwMaterialModes ) -> RwInt32 ; } extern "C" { pub fn RwAddPolygonToClump ( clump : * mut RwClump , sides : RwInt32 , varray : * mut RwInt32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwAddPolygonsToClump ( dst : * mut RwClump , src : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwAddTextureModeToMaterial ( m : * mut RwMaterial , mode : RwTextureModes ) -> * mut RwMaterial ; } extern "C" { pub fn RwAddTextureModeToPolygon ( apol : * mut RwPolygon3d , mode : RwTextureModes ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwAddTextureModeToSurface ( mode : RwTextureModes ) -> RwInt32 ; } extern "C" { pub fn RwAddTextureToDict ( name : * mut :: std :: os :: raw :: c_char , texture : * mut RwTexture ) -> * mut RwTexture ; } extern "C" { pub fn RwAddUserDrawToClump ( clump : * mut RwClump , userdraw : * mut RwUserDraw ) -> * mut RwClump ; } extern "C" { pub fn RwAddVector ( a : * mut RwV3d , b : * mut RwV3d , c : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwAddVertexToClump ( arg1 : * mut RwClump , x : f32 , y : f32 , z : f32 ) -> RwInt32 ; } extern "C" { pub fn RwBeginCameraUpdate ( cam : * mut RwCamera , param : * mut :: std :: os :: raw :: c_void ) -> * mut RwCamera ; } extern "C" { pub fn RwBeginStereoCameraUpdate ( c : * mut RwCamera , param : * mut :: std :: os :: raw :: c_void ) -> * mut RwCamera ; } extern "C" { pub fn RwBitmapRaster ( bitmap : * mut :: std :: os :: raw :: c_void , options : RwRasterOptions ) -> * mut RwRaster ; } extern "C" { pub fn RwBlock ( w : f32 , h : f32 , d : f32 ) -> RwInt32 ; } extern "C" { pub fn RwCalculateClumpVertexNormal ( clump : * mut RwClump , vindex : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwCalloc ( count : RwInt32 , size : RwInt32 ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwCheckStartDisplayDeviceExt ( dpDev : * mut RwDisplayDevice , param : * mut :: std :: os :: raw :: c_void , numargs : RwInt32 , args : * mut RwOpenArgument ) -> RwBool ; } extern "C" { pub fn RwClearCameraViewport ( cam : * mut RwCamera ) -> * mut RwCamera ; } extern "C" { pub fn RwClearStereoCameraViewport ( cam : * mut RwCamera ) -> * mut RwCamera ; } extern "C" { pub fn RwClose ( ) ; } extern "C" { pub fn RwCloseDebugStream ( ) ; } extern "C" { pub fn RwCloseDisplayDevice ( dpDev : * mut RwDisplayDevice ) -> RwBool ; } extern "C" { pub fn RwCloseStream ( stpStream : * mut RwStream , pData : * mut :: std :: os :: raw :: c_void ) -> RwBool ; } extern "C" { pub fn RwClumpBegin ( ) -> RwInt32 ; } extern "C" { pub fn RwClumpDistance ( clump : * mut RwClump , pos : * mut RwV3d ) -> f32 ; } extern "C" { pub fn RwClumpEnd ( instance : * mut * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwCone ( height : f32 , radius : f32 , sides : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwCopyMaterial ( src : * mut RwMaterial , dst : * mut RwMaterial ) -> * mut RwMaterial ; } extern "C" { pub fn RwCopyMatrix ( src : * mut RwMatrix4d , dst : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwCreateCamera ( maxw : RwInt32 , maxh : RwInt32 , image : * mut RwRaster ) -> * mut RwCamera ; } extern "C" { pub fn RwCreateClump ( vcount : RwInt32 , pcount : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwCreateClumpOrder ( clump : * mut RwClump , pindex : * mut RwInt32 ) -> * mut RwPolyList ; } extern "C" { pub fn RwCreateDepthCueColor ( r : f32 , g : f32 , b : f32 ) -> * mut RwDepthCueColor ; } extern "C" { pub fn RwCreateDepthCueColorStruct ( rgb : * mut RwRGBColor ) -> * mut RwDepthCueColor ; } extern "C" { pub fn RwCreateLight ( le : RwLightType , x : f32 , y : f32 , z : f32 , lum : f32 ) -> * mut RwLight ; } extern "C" { pub fn RwCreateMaterial ( ) -> * mut RwMaterial ; } extern "C" { pub fn RwCreateMatrix ( ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwCreateRaster ( w : RwInt32 , h : RwInt32 ) -> * mut RwRaster ; } extern "C" { pub fn RwCreateScene ( ) -> * mut RwScene ; } extern "C" { pub fn RwCreateSpline ( npoints : RwInt32 , type_ : RwSplineType , pts : * mut RwV3d ) -> * mut RwSpline ; } extern "C" { pub fn RwCreateSprite ( texture : * mut RwTexture ) -> * mut RwClump ; } extern "C" { pub fn RwCreateStereoCamera ( w : RwInt32 , h : RwInt32 , param : * mut RwRaster ) -> * mut RwCamera ; } extern "C" { pub fn RwCreateTexture ( raster : * mut RwRaster ) -> * mut RwTexture ; } extern "C" { pub fn RwCreateUserDraw ( type_ : RwUserDrawType , align : RwUserDrawAlignmentTypes , x : RwInt32 , y : RwInt32 , width : RwInt32 , height : RwInt32 , callback : RwUserDrawCallBack ) -> * mut RwUserDraw ; } extern "C" { pub fn RwCreateUserRaster ( w : RwInt32 , h : RwInt32 , stride : RwInt32 , pixels : * mut :: std :: os :: raw :: c_void ) -> * mut RwRaster ; } extern "C" { pub fn RwCrossProduct ( a : * mut RwV3d , b : * mut RwV3d , c : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwCubicTexturizeClump ( clump : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwCurrentMaterial ( ) -> * mut RwMaterial ; } extern "C" { pub fn RwCylinder ( height : f32 , minrad : f32 , maxrad : f32 , sides : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwDamageCameraViewport ( cam : * mut RwCamera , x : RwInt32 , y : RwInt32 , w : RwInt32 , h : RwInt32 ) -> * mut RwCamera ; } extern "C" { pub fn RwDefaultScene ( ) -> * mut RwScene ; } extern "C" { pub fn RwDestroyCamera ( cam : * mut RwCamera ) -> RwInt32 ; } extern "C" { pub fn RwDestroyClump ( clump : * mut RwClump ) -> RwInt32 ; } extern "C" { pub fn RwDestroyClumpOrder ( order : * mut RwPolyList ) ; } extern "C" { pub fn RwDestroyDepthCueColor ( col : * mut RwDepthCueColor ) -> RwBool ; } extern "C" { pub fn RwDestroyLight ( lite : * mut RwLight ) -> RwInt32 ; } extern "C" { pub fn RwDestroyMaterial ( m : * mut RwMaterial ) -> RwInt32 ; } extern "C" { pub fn RwDestroyMatrix ( m : * mut RwMatrix4d ) -> RwInt32 ; } extern "C" { pub fn RwDestroyPolygon ( pol : * mut RwPolygon3d ) -> RwInt32 ; } extern "C" { pub fn RwDestroyRaster ( ras : * mut RwRaster ) -> RwInt32 ; } extern "C" { pub fn RwDestroyScene ( arg1 : * mut RwScene ) -> RwBool ; } extern "C" { pub fn RwDestroySpline ( spline : * mut RwSpline ) -> RwInt32 ; } extern "C" { pub fn RwDestroyStereoCamera ( c : * mut RwCamera ) -> RwBool ; } extern "C" { pub fn RwDestroyTexture ( t : * mut RwTexture ) -> RwInt32 ; } extern "C" { pub fn RwDestroyUserDraw ( userdraw : * mut RwUserDraw ) -> RwInt32 ; } extern "C" { pub fn RwDeviceControl ( action : RwDeviceAction , param1 : :: std :: os :: raw :: c_long , param2 : * mut :: std :: os :: raw :: c_void , size : :: std :: os :: raw :: c_long ) -> RwInt32 ; } extern "C" { pub fn RwDisc ( height : f32 , radius : f32 , sides : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwDotProduct ( a : * mut RwV3d , b : * mut RwV3d ) -> f32 ; } extern "C" { pub fn RwDuplicateCamera ( cam : * mut RwCamera , image : * mut RwRaster ) -> * mut RwCamera ; } extern "C" { pub fn RwDuplicateClump ( clump : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwDuplicateLight ( light : * mut RwLight ) -> * mut RwLight ; } extern "C" { pub fn RwDuplicateMaterial ( src : * mut RwMaterial ) -> * mut RwMaterial ; } extern "C" { pub fn RwDuplicateMatrix ( m : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwDuplicateRaster ( ras : * mut RwRaster ) -> * mut RwRaster ; } extern "C" { pub fn RwDuplicateSpline ( s : * mut RwSpline ) -> * mut RwSpline ; } extern "C" { pub fn RwDuplicateUserDraw ( userdraw : * mut RwUserDraw ) -> * mut RwUserDraw ; } extern "C" { pub fn RwEndCameraUpdate ( cam : * mut RwCamera ) -> * mut RwCamera ; } extern "C" { pub fn RwEndStereoCameraUpdate ( cam : * mut RwCamera ) -> * mut RwCamera ; } extern "C" { pub fn RwEnvMapClump ( clump : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwExtract ( cpIn : * mut :: std :: os :: raw :: c_char , nNo : RwInt32 , cpOut : * mut :: std :: os :: raw :: c_char , nMax : RwInt32 ) -> RwBool ; } extern "C" { pub fn RwFindClump ( clump : * mut RwClump , predicate : RwClumpPredicateVoid ) -> * mut RwClump ; } extern "C" { pub fn RwFindClumpInt ( clump : * mut RwClump , predicate : RwClumpPredicateInt , arg : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwFindClumpLong ( clump : * mut RwClump , predicate : RwClumpPredicateLong , arg : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwFindClumpPointer ( clump : * mut RwClump , predicate : RwClumpPredicatePointer , arg : * mut :: std :: os :: raw :: c_void ) -> * mut RwClump ; } extern "C" { pub fn RwFindClumpReal ( clump : * mut RwClump , predicate : RwClumpPredicateReal , arg : f32 ) -> * mut RwClump ; } extern "C" { pub fn RwFindDisplayDevice ( cpDevices : * mut :: std :: os :: raw :: c_char , dcpRequest : * mut RwDeviceCapabilities , cpInitString : * mut :: std :: os :: raw :: c_char , pParam : * mut :: std :: os :: raw :: c_void , nNumArgs : RwInt32 , aaArgs : * mut RwOpenArgument ) -> RwUInt32 ; } extern "C" { pub fn RwFindNamedTexture ( name : * mut :: std :: os :: raw :: c_char ) -> * mut RwTexture ; } extern "C" { pub fn RwFindStreamChunk ( stpStream : * mut RwStream , nType : RwUInt32 ) -> RwBool ; } extern "C" { pub fn RwFindTaggedClump ( clump : * mut RwClump , tag : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwFindTaggedPolygon ( clump : * mut RwClump , tag : RwInt32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwForAllClumpsInHierarchy ( clump : * mut RwClump , func : RwClumpFuncVoid ) -> * mut RwClump ; } extern "C" { pub fn RwForAllClumpsInHierarchyInt ( clump : * mut RwClump , func : RwClumpFuncInt , arg : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwForAllClumpsInHierarchyLong ( clump : * mut RwClump , func : RwClumpFuncLong , arg : :: std :: os :: raw :: c_long ) -> * mut RwClump ; } extern "C" { pub fn RwForAllClumpsInHierarchyPointer ( clump : * mut RwClump , func : RwClumpFuncPointer , arg : * mut :: std :: os :: raw :: c_void ) -> * mut RwClump ; } extern "C" { pub fn RwForAllClumpsInHierarchyReal ( clump : * mut RwClump , func : RwClumpFuncReal , arg : f32 ) -> * mut RwClump ; } extern "C" { pub fn RwForAllClumpsInScene ( arg1 : * mut RwScene , arg2 : RwClumpFuncVoid ) -> * mut RwScene ; } extern "C" { pub fn RwForAllClumpsInSceneInt ( arg1 : * mut RwScene , arg2 : RwClumpFuncInt , arg3 : RwInt32 ) -> * mut RwScene ; } extern "C" { pub fn RwForAllClumpsInSceneLong ( arg1 : * mut RwScene , arg2 : RwClumpFuncLong , arg3 : RwInt32 ) -> * mut RwScene ; } extern "C" { pub fn RwForAllClumpsInScenePointer ( arg1 : * mut RwScene , arg2 : RwClumpFuncPointer , arg3 : * mut :: std :: os :: raw :: c_void ) -> * mut RwScene ; } extern "C" { pub fn RwForAllClumpsInSceneReal ( arg1 : * mut RwScene , arg2 : RwClumpFuncReal , arg3 : f32 ) -> * mut RwScene ; } extern "C" { pub fn RwForAllLightsInScene ( arg1 : * mut RwScene , arg2 : RwLightFuncVoid ) -> * mut RwScene ; } extern "C" { pub fn RwForAllLightsInSceneInt ( arg1 : * mut RwScene , arg2 : RwLightFuncInt , arg3 : RwInt32 ) -> * mut RwScene ; } extern "C" { pub fn RwForAllLightsInSceneLong ( arg1 : * mut RwScene , arg2 : RwLightFuncLong , arg3 : RwInt32 ) -> * mut RwScene ; } extern "C" { pub fn RwForAllLightsInScenePointer ( arg1 : * mut RwScene , arg2 : RwLightFuncPointer , arg3 : * mut :: std :: os :: raw :: c_void ) -> * mut RwScene ; } extern "C" { pub fn RwForAllLightsInSceneReal ( arg1 : * mut RwScene , arg2 : RwLightFuncReal , arg3 : f32 ) -> * mut RwScene ; } extern "C" { pub fn RwForAllNamedTextures ( func : RwTextureFuncVoid ) -> RwInt32 ; } extern "C" { pub fn RwForAllNamedTexturesInt ( func : RwTextureFuncInt , arg : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwForAllNamedTexturesLong ( func : RwTextureFuncLong , arg : :: std :: os :: raw :: c_long ) -> RwInt32 ; } extern "C" { pub fn RwForAllNamedTexturesPointer ( func : RwTextureFuncPointer , arg : * mut :: std :: os :: raw :: c_void ) -> RwInt32 ; } extern "C" { pub fn RwForAllNamedTexturesReal ( func : RwTextureFuncReal , arg : f32 ) -> RwInt32 ; } extern "C" { pub fn RwForAllPolygonsInClump ( clump : * mut RwClump , func : RwPolygon3dFuncVoid ) -> * mut RwClump ; } extern "C" { pub fn RwForAllPolygonsInClumpInt ( clump : * mut RwClump , func : RwPolygon3dFuncInt , arg : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwForAllPolygonsInClumpLong ( clump : * mut RwClump , func : RwPolygon3dFuncLong , arg : :: std :: os :: raw :: c_long ) -> * mut RwClump ; } extern "C" { pub fn RwForAllPolygonsInClumpPointer ( clump : * mut RwClump , func : RwPolygon3dFuncPointer , arg : * mut :: std :: os :: raw :: c_void ) -> * mut RwClump ; } extern "C" { pub fn RwForAllPolygonsInClumpReal ( clump : * mut RwClump , func : RwPolygon3dFuncReal , arg : f32 ) -> * mut RwClump ; } extern "C" { pub fn RwForAllUserDrawsInClump ( clump : * mut RwClump , func : RwUserDrawFuncVoid ) -> * mut RwClump ; } extern "C" { pub fn RwForAllUserDrawsInClumpInt ( clump : * mut RwClump , func : RwUserDrawFuncInt , arg : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwForAllUserDrawsInClumpLong ( clump : * mut RwClump , func : RwUserDrawFuncLong , arg : :: std :: os :: raw :: c_long ) -> * mut RwClump ; } extern "C" { pub fn RwForAllUserDrawsInClumpPointer ( clump : * mut RwClump , func : RwUserDrawFuncPointer , arg : * mut :: std :: os :: raw :: c_void ) -> * mut RwClump ; } extern "C" { pub fn RwForAllUserDrawsInClumpReal ( clump : * mut RwClump , func : RwUserDrawFuncReal , arg : f32 ) -> * mut RwClump ; } extern "C" { pub fn RwFclose ( stream : * mut FILE ) -> RwInt32 ; } extern "C" { pub fn RwFopen ( filename : * const :: std :: os :: raw :: c_char , mode : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn RwFread ( buffer : * mut :: std :: os :: raw :: c_void , size : RwInt32 , count : RwInt32 , stream : * mut FILE ) -> RwInt32 ; } extern "C" { pub fn RwFree ( ptr : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn RwFwrite ( buffer : * mut :: std :: os :: raw :: c_void , size : RwInt32 , count : RwInt32 , stream : * mut FILE ) -> RwInt32 ; } extern "C" { pub fn RwGetCameraBackColor ( cam : * mut RwCamera , color : * mut RwRGBColor ) -> * mut RwRGBColor ; } extern "C" { pub fn RwGetCameraBackdrop ( cam : * mut RwCamera ) -> * mut RwRaster ; } extern "C" { pub fn RwGetCameraBackdropOffset ( cam : * mut RwCamera , x : * mut RwInt32 , y : * mut RwInt32 ) -> * mut RwCamera ; } extern "C" { pub fn RwGetCameraBackdropViewportRect ( cam : * mut RwCamera , x : * mut RwInt32 , y : * mut RwInt32 , w : * mut RwInt32 , h : * mut RwInt32 ) -> * mut RwCamera ; } extern "C" { pub fn RwGetCameraData ( cam : * mut RwCamera ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetCameraFarClipping ( cam : * mut RwCamera ) -> f32 ; } extern "C" { pub fn RwGetCameraRenderOffset ( cam : * mut RwCamera , x : * mut RwInt32 , y : * mut RwInt32 ) -> * mut RwCamera ; } extern "C" { pub fn RwGetCameraZFar ( cam : * mut RwCamera ) -> f32 ; } extern "C" { pub fn RwGetCameraZNear ( cam : * mut RwCamera ) -> f32 ; } extern "C" { pub fn RwGetCameraZRaster ( cam : * mut RwCamera ) -> * mut RwRaster ; } extern "C" { pub fn RwGetCameraZState ( cam : * mut RwCamera ) -> RwState ; } extern "C" { pub fn RwGetCameraImage ( cam : * mut RwCamera ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetCameraLTM ( camera : * mut RwCamera , m : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwGetCameraLookAt ( cam : * mut RwCamera , p : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetCameraLookRight ( cam : * mut RwCamera , p : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetCameraLookUp ( cam : * mut RwCamera , p : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetCameraNearClipping ( cam : * mut RwCamera ) -> f32 ; } extern "C" { pub fn RwGetCameraPosition ( cam : * mut RwCamera , p : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetCameraProjection ( arg1 : * mut RwCamera ) -> RwCameraProjection ; } extern "C" { pub fn RwGetCameraRaster ( cam : * mut RwCamera ) -> * mut RwRaster ; } extern "C" { pub fn RwGetCameraViewOffset ( cam : * mut RwCamera , p : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetCameraViewport ( cam : * mut RwCamera , x : * mut RwInt32 , y : * mut RwInt32 , w : * mut RwInt32 , h : * mut RwInt32 ) -> * mut RwCamera ; } extern "C" { pub fn RwGetCameraViewwindow ( cam : * mut RwCamera , w : * mut f32 , h : * mut f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwGetChunkSize ( nType : RwUInt32 , pData : * mut :: std :: os :: raw :: c_void , nFlags : RwUInt32 ) -> RwUInt32 ; } extern "C" { pub fn RwGetClumpAxisAlignment ( clump : * mut RwClump ) -> RwAxisAlignment ; } extern "C" { pub fn RwGetClumpBBox ( clump : * mut RwClump , blleft : * mut RwV3d , furight : * mut RwV3d ) -> * mut RwClump ; } extern "C" { pub fn RwGetClumpData ( clump : * mut RwClump ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetClumpHints ( clump : * mut RwClump ) -> RwClumpHints ; } extern "C" { pub fn RwGetClumpImmPolygon ( clump : * mut RwClump , i : RwInt32 ) -> * mut RwImmPolygon3d ; } extern "C" { pub fn RwGetClumpImmVertex ( clump : * mut RwClump , i : RwInt32 ) -> * mut RwImmVertex3d ; } extern "C" { pub fn RwGetClumpImmediateCallBack ( clump : * mut RwClump ) -> RwClumpCallBack ; } extern "C" { pub fn RwGetClumpJointMatrix ( clump : * mut RwClump , matrix : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwGetClumpLTM ( clump : * mut RwClump , mat : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwGetClumpLightSampleRate ( clump : * mut RwClump ) -> f32 ; } extern "C" { pub fn RwGetClumpLocalBBox ( clump : * mut RwClump , blleft : * mut RwV3d , furight : * mut RwV3d ) -> * mut RwClump ; } extern "C" { pub fn RwGetClumpMatrix ( clump : * mut RwClump , mat : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwGetClumpNumChildren ( clump : * mut RwClump ) -> RwInt32 ; } extern "C" { pub fn RwGetClumpNumPolygons ( clump : * mut RwClump ) -> RwInt32 ; } extern "C" { pub fn RwGetClumpNumUserDraws ( clump : * mut RwClump ) -> RwInt32 ; } extern "C" { pub fn RwGetClumpNumVertices ( clump : * mut RwClump ) -> RwInt32 ; } extern "C" { pub fn RwGetClumpOrigin ( arg1 : * mut RwClump , o : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetClumpOwner ( clump : * mut RwClump ) -> * mut RwScene ; } extern "C" { pub fn RwGetClumpParent ( clump : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwGetClumpRoot ( clump : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwGetClumpState ( clump : * mut RwClump ) -> RwState ; } extern "C" { pub fn RwGetClumpTag ( clump : * mut RwClump ) -> RwInt32 ; } extern "C" { pub fn RwGetClumpVertex ( clump : * mut RwClump , vindex : RwInt32 , vertex : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetClumpVertexNormal ( clump : * mut RwClump , vindex : RwInt32 , normal : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetClumpVertexUV ( clump : * mut RwClump , vindex : RwInt32 , uv : * mut RwUV ) -> * mut RwUV ; } extern "C" { pub fn RwGetClumpVertexViewportPosition ( clump : * mut RwClump , vindex : RwInt32 , camera : * mut RwCamera , px : * mut RwInt32 , py : * mut RwInt32 , visible : * mut RwBool ) -> RwBool ; } extern "C" { pub fn RwGetClumpViewportRect ( clump : * mut RwClump , cam : * mut RwCamera , x : * mut RwInt32 , y : * mut RwInt32 , w : * mut RwInt32 , h : * mut RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwGetDebugAssertionState ( ) -> RwState ; } extern "C" { pub fn RwGetDebugMessageState ( ) -> RwState ; } extern "C" { pub fn RwGetDebugScriptState ( ) -> RwState ; } extern "C" { pub fn RwGetDebugSeverity ( ) -> RwDebugSeverity ; } extern "C" { pub fn RwGetDebugTraceState ( ) -> RwState ; } extern "C" { pub fn RwGetDepthCueDistance ( ) -> f32 ; } extern "C" { pub fn RwGetDepthCueType ( ) -> RwDepthCueType ; } extern "C" { pub fn RwGetDeviceInfo ( info : RwDeviceInfo , value : * mut :: std :: os :: raw :: c_void , size : :: std :: os :: raw :: c_long ) -> RwInt32 ; } extern "C" { pub fn RwGetDisplayDevices ( ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn RwGetFirstChildClump ( clump : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwGetLeftStereoCamera ( c : * mut RwCamera ) -> * mut RwCamera ; } extern "C" { pub fn RwGetLightBrightness ( l : * mut RwLight ) -> f32 ; } extern "C" { pub fn RwGetLightColor ( l : * mut RwLight , color : * mut RwRGBColor ) -> * mut RwRGBColor ; } extern "C" { pub fn RwGetLightConeAngle ( l : * mut RwLight ) -> f32 ; } extern "C" { pub fn RwGetLightData ( lite : * mut RwLight ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetLightLTM ( light : * mut RwLight , m : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwGetLightOwner ( l : * mut RwLight ) -> * mut RwScene ; } extern "C" { pub fn RwGetLightPosition ( lite : * mut RwLight , p : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetLightRadius ( l : * mut RwLight ) -> f32 ; } extern "C" { pub fn RwGetLightState ( lite : * mut RwLight ) -> RwState ; } extern "C" { pub fn RwGetLightType ( l : * mut RwLight ) -> RwLightType ; } extern "C" { pub fn RwGetLightVector ( l : * mut RwLight , v : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetMaterialAmbient ( m : * mut RwMaterial ) -> f32 ; } extern "C" { pub fn RwGetMaterialAmbientRGB ( m : * mut RwMaterial , ka : * mut RwRGBColor ) -> * mut RwRGBColor ; } extern "C" { pub fn RwGetMaterialColor ( m : * mut RwMaterial , color : * mut RwRGBColor ) -> * mut RwRGBColor ; } extern "C" { pub fn RwGetMaterialData ( m : * mut RwMaterial ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetMaterialDiffuse ( m : * mut RwMaterial ) -> f32 ; } extern "C" { pub fn RwGetMaterialDiffuseRGB ( m : * mut RwMaterial , kd : * mut RwRGBColor ) -> * mut RwRGBColor ; } extern "C" { pub fn RwGetMaterialGeometrySampling ( m : * mut RwMaterial ) -> RwGeometrySampling ; } extern "C" { pub fn RwGetMaterialLightSampling ( m : * mut RwMaterial ) -> RwLightSampling ; } extern "C" { pub fn RwGetMaterialModes ( m : * mut RwMaterial ) -> RwMaterialModes ; } extern "C" { pub fn RwGetMaterialOpacity ( m : * mut RwMaterial ) -> f32 ; } extern "C" { pub fn RwGetMaterialSpecular ( m : * mut RwMaterial ) -> f32 ; } extern "C" { pub fn RwGetMaterialSpecularRGB ( m : * mut RwMaterial , ks : * mut RwRGBColor ) -> * mut RwRGBColor ; } extern "C" { pub fn RwGetMaterialTexture ( m : * mut RwMaterial ) -> * mut RwTexture ; } extern "C" { pub fn RwGetMaterialTextureModes ( m : * mut RwMaterial ) -> RwTextureModes ; } extern "C" { pub fn RwGetMatrixElement ( m : * mut RwMatrix4d , i : RwInt32 , j : RwInt32 ) -> f32 ; } extern "C" { pub fn RwGetMatrixElements ( m : * mut RwMatrix4d , farray : * mut [ f32 ; 4usize ] ) -> * mut f32 ; } extern "C" { pub fn RwGetNamedTexture ( name : * mut :: std :: os :: raw :: c_char ) -> * mut RwTexture ; } extern "C" { pub fn RwGetNextClump ( clump : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwGetNumNamedTextures ( ) -> RwInt32 ; } extern "C" { pub fn RwGetPaletteEntries ( n : RwInt32 , length : RwInt32 , rgb : * mut RwPaletteEntry ) -> * mut RwPaletteEntry ; } extern "C" { pub fn RwGetPolygonAmbient ( pol : * mut RwPolygon3d ) -> f32 ; } extern "C" { pub fn RwGetPolygonAmbientRGB ( pol : * mut RwPolygon3d , Ka : * mut RwRGBColor ) -> * mut RwRGBColor ; } extern "C" { pub fn RwGetPolygonCenter ( pol : * mut RwPolygon3d , p : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetPolygonColor ( pol : * mut RwPolygon3d , color : * mut RwRGBColor ) -> * mut RwRGBColor ; } extern "C" { pub fn RwGetPolygonData ( pol : * mut RwPolygon3d ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetPolygonDiffuse ( pol : * mut RwPolygon3d ) -> f32 ; } extern "C" { pub fn RwGetPolygonDiffuseRGB ( pol : * mut RwPolygon3d , Kd : * mut RwRGBColor ) -> * mut RwRGBColor ; } extern "C" { pub fn RwGetPolygonGeometrySampling ( p : * mut RwPolygon3d ) -> RwGeometrySampling ; } extern "C" { pub fn RwGetPolygonLightSampling ( apol : * mut RwPolygon3d ) -> RwLightSampling ; } extern "C" { pub fn RwGetPolygonMaterial ( p : * mut RwPolygon3d ) -> * mut RwMaterial ; } extern "C" { pub fn RwGetPolygonMaterialModes ( apol : * mut RwPolygon3d ) -> RwMaterialModes ; } extern "C" { pub fn RwGetPolygonNormal ( pol : * mut RwPolygon3d , p : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetPolygonNumSides ( p : * mut RwPolygon3d ) -> RwInt32 ; } extern "C" { pub fn RwGetPolygonOpacity ( p : * mut RwPolygon3d ) -> f32 ; } extern "C" { pub fn RwGetPolygonOwner ( pol : * mut RwPolygon3d ) -> * mut RwClump ; } extern "C" { pub fn RwGetPolygonSpecular ( pol : * mut RwPolygon3d ) -> f32 ; } extern "C" { pub fn RwGetPolygonSpecularRGB ( pol : * mut RwPolygon3d , Ks : * mut RwRGBColor ) -> * mut RwRGBColor ; } extern "C" { pub fn RwGetPolygonTag ( pol : * mut RwPolygon3d ) -> RwInt32 ; } extern "C" { pub fn RwGetPolygonTexture ( p : * mut RwPolygon3d ) -> * mut RwTexture ; } extern "C" { pub fn RwGetPolygonTextureModes ( apol : * mut RwPolygon3d ) -> RwTextureModes ; } extern "C" { pub fn RwGetPolygonUV ( p : * mut RwPolygon3d , uv : * mut RwUV ) -> * mut RwUV ; } extern "C" { pub fn RwGetPolygonVertices ( p : * mut RwPolygon3d , varray : * mut RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwGetRasterData ( ras : * mut RwRaster ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetRasterDepth ( ras : * mut RwRaster ) -> RwInt32 ; } extern "C" { pub fn RwGetRasterHeight ( ras : * mut RwRaster ) -> RwInt32 ; } extern "C" { pub fn RwGetRasterInfo ( ras : * mut RwRaster , info : * mut RwRasterInfo ) -> * mut RwRaster ; } extern "C" { pub fn RwGetRasterPixels ( ras : * mut RwRaster ) -> * mut :: std :: os :: raw :: c_uchar ; } extern "C" { pub fn RwGetRasterStride ( ras : * mut RwRaster ) -> RwInt32 ; } extern "C" { pub fn RwGetRasterWidth ( ras : * mut RwRaster ) -> RwInt32 ; } extern "C" { pub fn RwGetRightStereoCamera ( c : * mut RwCamera ) -> * mut RwCamera ; } extern "C" { pub fn RwGetSceneData ( arg1 : * mut RwScene ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetSceneNumClumps ( arg1 : * mut RwScene ) -> RwInt32 ; } extern "C" { pub fn RwGetSceneNumLights ( arg1 : * mut RwScene ) -> RwInt32 ; } extern "C" { pub fn RwGetShapePath ( path : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn RwGetSplineData ( spline : * mut RwSpline ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetSplineNumPoints ( sp : * mut RwSpline ) -> RwInt32 ; } extern "C" { pub fn RwGetSplinePoint ( sp : * mut RwSpline , control : RwInt32 , point : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwGetStereoCameraEyeSeparation ( c : * mut RwCamera ) -> f32 ; } extern "C" { pub fn RwGetStereoCameraFocalDistance ( c : * mut RwCamera ) -> f32 ; } extern "C" { pub fn RwGetStereoCameraMode ( c : * mut RwCamera ) -> RwStereoMode ; } extern "C" { pub fn RwGetSystemInfo ( info : RwSystemInfo , value : * mut :: std :: os :: raw :: c_void , size : :: std :: os :: raw :: c_long ) -> RwInt32 ; } extern "C" { pub fn RwGetTextureData ( texture : * mut RwTexture ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetTextureDictSearchMode ( ) -> RwSearchMode ; } extern "C" { pub fn RwGetTextureDithering ( ) -> RwTextureDitherMode ; } extern "C" { pub fn RwGetTextureFrame ( t : * mut RwTexture ) -> RwInt32 ; } extern "C" { pub fn RwGetTextureFrameStep ( t : * mut RwTexture ) -> RwInt32 ; } extern "C" { pub fn RwGetTextureGammaCorrection ( ) -> RwState ; } extern "C" { pub fn RwGetTextureMipmapRaster ( texture : * mut RwTexture ) -> * mut RwRaster ; } extern "C" { pub fn RwGetTextureMipmapState ( ) -> RwState ; } extern "C" { pub fn RwGetTextureName ( texture : * mut RwTexture , name : * mut :: std :: os :: raw :: c_char , size : :: std :: os :: raw :: c_long ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn RwGetTextureNumFrames ( t : * mut RwTexture ) -> RwInt32 ; } extern "C" { pub fn RwGetTextureRaster ( texture : * mut RwTexture ) -> * mut RwRaster ; } extern "C" { pub fn RwGetUserDrawAlignment ( userdraw : * mut RwUserDraw ) -> RwUserDrawAlignmentTypes ; } extern "C" { pub fn RwGetUserDrawCallback ( userdraw : * mut RwUserDraw ) -> RwUserDrawCallBack ; } extern "C" { pub fn RwGetUserDrawData ( userdraw : * mut RwUserDraw ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwGetUserDrawOffset ( userdraw : * mut RwUserDraw , x : * mut RwInt32 , y : * mut RwInt32 ) -> * mut RwUserDraw ; } extern "C" { pub fn RwGetUserDrawOwner ( userdraw : * mut RwUserDraw ) -> * mut RwClump ; } extern "C" { pub fn RwGetUserDrawParentAlignment ( userdraw : * mut RwUserDraw ) -> RwUserDrawAlignmentTypes ; } extern "C" { pub fn RwGetUserDrawSize ( userdraw : * mut RwUserDraw , width : * mut RwInt32 , height : * mut RwInt32 ) -> * mut RwUserDraw ; } extern "C" { pub fn RwGetUserDrawType ( userdraw : * mut RwUserDraw ) -> RwUserDrawType ; } extern "C" { pub fn RwGetUserDrawVertexIndex ( userdraw : * mut RwUserDraw ) -> RwInt32 ; } extern "C" { pub fn RwHemisphere ( radius : f32 , sides : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwIdentityCTM ( ) -> RwInt32 ; } extern "C" { pub fn RwIdentityJointTM ( ) -> RwInt32 ; } extern "C" { pub fn RwIdentityMatrix ( m : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwImmVertexPixelSpace ( ivpV : * mut RwImmVertex3d ) ; } extern "C" { pub fn RwImmZBufferDepth ( cam : * mut RwCamera , depth : f32 ) -> RwFixed ; } extern "C" { pub fn RwImmediateBegin ( rect : * mut RwRect ) ; } extern "C" { pub fn RwImmediateEnd ( ) ; } extern "C" { pub fn RwInclude ( clump : * mut RwClump ) -> RwInt32 ; } extern "C" { pub fn RwIncludeGeometry ( clump : * mut RwClump ) -> RwInt32 ; } extern "C" { pub fn RwInitialize ( stdlib : * mut RwStdlib ) -> RwBool ; } extern "C" { pub fn RwInvalidateCameraViewport ( cam : * mut RwCamera ) -> * mut RwCamera ; } extern "C" { pub fn RwInvertMatrix ( src : * mut RwMatrix4d , dst : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwJointTransformBegin ( ) -> RwInt32 ; } extern "C" { pub fn RwJointTransformEnd ( ) -> RwInt32 ; } extern "C" { pub fn RwMaskTexture ( t : * mut RwTexture , mask : * mut RwRaster ) -> * mut RwTexture ; } extern "C" { pub fn RwMalloc ( size : RwInt32 ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwMaterialBegin ( ) -> RwInt32 ; } extern "C" { pub fn RwMaterialEnd ( ) -> RwInt32 ; } extern "C" { pub fn RwModelBegin ( ) -> RwInt32 ; } extern "C" { pub fn RwModelEnd ( ) -> RwInt32 ; } extern "C" { pub fn RwMultiplyMatrix ( a : * mut RwMatrix4d , b : * mut RwMatrix4d , dst : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwNormalize ( vector : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwNormalizeClump ( clump : * mut RwClump ) -> * mut RwClump ; } extern "stdcall" { pub fn RwOpen ( name : * mut :: std :: os :: raw :: c_char , param : * mut :: std :: os :: raw :: c_void ) -> RwBool ; } extern "C" { pub fn RwOpenDebugStream ( filename : * mut :: std :: os :: raw :: c_char ) -> RwInt32 ; } extern "C" { pub fn RwOpenDisplayDevice ( cpDevice : * mut :: std :: os :: raw :: c_char , cpInitString : * mut :: std :: os :: raw :: c_char ) -> * mut RwDisplayDevice ; } extern "C" { pub fn RwOpenExt ( name : * mut :: std :: os :: raw :: c_char , param : * mut :: std :: os :: raw :: c_void , numargs : RwInt32 , args : * mut RwOpenArgument ) -> RwBool ; } extern "C" { pub fn RwOpenStream ( stType : RwStreamType , saAccess : RwStreamAccessType , pData : * mut :: std :: os :: raw :: c_void ) -> * mut RwStream ; } extern "C" { pub fn RwOrthoNormalizeMatrix ( src : * mut RwMatrix4d , dst : * mut RwMatrix4d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwPanCamera ( cam : * mut RwCamera , theta : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwPickClump ( clump : * mut RwClump , vpx : RwInt32 , vpy : RwInt32 , cam : * mut RwCamera , record : * mut RwPickRecord ) -> * mut RwPickRecord ; } extern "C" { pub fn RwPickScene ( arg1 : * mut RwScene , x : RwInt32 , y : RwInt32 , arg2 : * mut RwCamera , arg3 : * mut RwPickRecord ) -> * mut RwPickRecord ; } extern "C" { pub fn RwPointCamera ( cam : * mut RwCamera , x : f32 , y : f32 , z : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwPolygon ( sides : RwInt32 , varray : * mut RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwPolygonExt ( sides : RwInt32 , varray : * mut RwInt32 , tag : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwPopCurrentMaterial ( ) -> * mut RwMaterial ; } extern "C" { pub fn RwPopScratchMatrix ( ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwProtoBegin ( name : * mut :: std :: os :: raw :: c_char ) -> RwInt32 ; } extern "C" { pub fn RwProtoEnd ( ) -> RwInt32 ; } extern "C" { pub fn RwProtoInstance ( name : * mut :: std :: os :: raw :: c_char ) -> RwInt32 ; } extern "C" { pub fn RwProtoInstanceGeometry ( name : * mut :: std :: os :: raw :: c_char ) -> RwInt32 ; } extern "C" { pub fn RwPushCurrentMaterial ( ) -> * mut RwMaterial ; } extern "C" { pub fn RwPushScratchMatrix ( ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwQuad ( v1 : RwInt32 , v2 : RwInt32 , v3 : RwInt32 , v4 : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwQuadExt ( v1 : RwInt32 , v2 : RwInt32 , v3 : RwInt32 , v4 : RwInt32 , tag : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwQueryRotateMatrix ( mat : * mut RwMatrix4d , axis : * mut RwV3d , degrees : * mut f32 , center : * mut RwV3d ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwRandom ( ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn RwReadMaskRaster ( name : * mut :: std :: os :: raw :: c_char ) -> * mut RwRaster ; } extern "C" { pub fn RwReadNamedTexture ( name : * mut :: std :: os :: raw :: c_char ) -> * mut RwTexture ; } extern "C" { pub fn RwReadRaster ( name : * mut :: std :: os :: raw :: c_char , options : RwRasterOptions ) -> * mut RwRaster ; } extern "C" { pub fn RwReadShape ( filename : * mut :: std :: os :: raw :: c_char ) -> * mut RwClump ; } extern "C" { pub fn RwReadStream ( stpStream : * mut RwStream , pBuffer : * mut :: std :: os :: raw :: c_void , nLength : RwUInt32 ) -> RwBool ; } extern "C" { pub fn RwReadStreamChunk ( stpStream : * mut RwStream , nType : RwUInt32 , pData : * mut :: std :: os :: raw :: c_void , nFlags : RwUInt32 ) -> RwBool ; } extern "C" { pub fn RwReadStreamChunkHeader ( stpStream : * mut RwStream ) -> RwInt32 ; } extern "C" { pub fn RwReadStreamChunkType ( stpStream : * mut RwStream , npType : * mut RwUInt32 ) -> RwBool ; } extern "C" { pub fn RwReadStreamInt ( stpStream : * mut RwStream , npInt : * mut RwInt32 , nBytes : RwInt32 ) -> RwBool ; } extern "C" { pub fn RwReadStreamReal ( stpStream : * mut RwStream , npReal : * mut f32 , nBytes : RwInt32 ) -> RwBool ; } extern "C" { pub fn RwReadTexture ( name : * mut :: std :: os :: raw :: c_char ) -> * mut RwTexture ; } extern "C" { pub fn RwRealloc ( ptr : * mut :: std :: os :: raw :: c_void , size : RwInt32 ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn RwRelease ( ) ; } extern "C" { pub fn RwReleaseRasterPixels ( ras : * mut RwRaster , pixels : * mut :: std :: os :: raw :: c_uchar ) -> * mut RwRaster ; } extern "C" { pub fn RwRemoveChildFromClump ( clump : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwRemoveClumpFromScene ( arg1 : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwRemoveHint ( hint : RwClumpHints ) -> RwInt32 ; } extern "C" { pub fn RwRemoveHintFromClump ( clump : * mut RwClump , hint : RwClumpHints ) -> * mut RwClump ; } extern "C" { pub fn RwRemoveLightFromScene ( arg1 : * mut RwLight ) -> * mut RwLight ; } extern "C" { pub fn RwRemoveMaterialModeFromMaterial ( m : * mut RwMaterial , mode : RwMaterialModes ) -> * mut RwMaterial ; } extern "C" { pub fn RwRemoveMaterialModeFromPolygon ( apol : * mut RwPolygon3d , mode : RwMaterialModes ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwRemoveMaterialModeFromSurface ( mode : RwMaterialModes ) -> RwInt32 ; } extern "C" { pub fn RwRemoveTextureModeFromMaterial ( m : * mut RwMaterial , mode : RwTextureModes ) -> * mut RwMaterial ; } extern "C" { pub fn RwRemoveTextureModeFromPolygon ( apol : * mut RwPolygon3d , mode : RwTextureModes ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwRemoveTextureModeFromSurface ( mode : RwTextureModes ) -> RwInt32 ; } extern "C" { pub fn RwRemoveUserDrawFromClump ( userdraw : * mut RwUserDraw ) -> * mut RwUserDraw ; } extern "C" { pub fn RwRenderClump ( clump : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwRenderImmediateClump ( ) ; } extern "C" { pub fn RwRenderImmediateLine ( imm : * mut RwImmediate ) ; } extern "C" { pub fn RwRenderImmediateTriangle ( imm : * mut RwImmediate ) ; } extern "C" { pub fn RwRenderScene ( arg1 : * mut RwScene ) -> * mut RwScene ; } extern "C" { pub fn RwRenderStereoClump ( c : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwRenderStereoScene ( s : * mut RwScene ) -> * mut RwScene ; } extern "C" { pub fn RwResetCamera ( cam : * mut RwCamera ) -> * mut RwCamera ; } extern "C" { pub fn RwReversePolygonFace ( pol : * mut RwPolygon3d ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwRevolveCamera ( cam : * mut RwCamera , theta : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwRotateCTM ( ax : f32 , ay : f32 , az : f32 , theta : f32 ) -> RwInt32 ; } extern "C" { pub fn RwRotateJointTM ( ax : f32 , ay : f32 , az : f32 , theta : f32 ) -> RwInt32 ; } extern "C" { pub fn RwRotateMatrix ( m : * mut RwMatrix4d , x : f32 , y : f32 , z : f32 , theta : f32 , op : RwCombineOperation ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwRotateMatrixCos ( m : * mut RwMatrix4d , x : f32 , y : f32 , z : f32 , ctheta : f32 , direction : f32 , op : RwCombineOperation ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwSRandom ( x : :: std :: os :: raw :: c_ulong ) ; } extern "C" { pub fn RwScaleCTM ( sx : f32 , sy : f32 , sz : f32 ) -> RwInt32 ; } extern "C" { pub fn RwScaleMatrix ( m : * mut RwMatrix4d , sx : f32 , sy : f32 , sz : f32 , op : RwCombineOperation ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwScaleVector ( a : * mut RwV3d , scale : f32 , c : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwScratchMatrix ( ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwSeekStream ( stpStream : * mut RwStream , offset : RwUInt32 ) -> RwBool ; } extern "C" { pub fn RwSetAxisAlignment ( alignment : RwAxisAlignment ) -> RwInt32 ; } extern "C" { pub fn RwSetCameraBackColor ( cam : * mut RwCamera , r : f32 , g : f32 , b : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraBackColorStruct ( cam : * mut RwCamera , color : * mut RwRGBColor ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraBackdrop ( cam : * mut RwCamera , raster : * mut RwRaster ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraBackdropOffset ( cam : * mut RwCamera , x : RwInt32 , y : RwInt32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraBackdropViewportRect ( cam : * mut RwCamera , x : RwInt32 , y : RwInt32 , w : RwInt32 , h : RwInt32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraData ( cam : * mut RwCamera , data : * mut :: std :: os :: raw :: c_void ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraFarClipping ( cam : * mut RwCamera , fard : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraZState ( cam : * mut RwCamera , state : RwState ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraLookAt ( cam : * mut RwCamera , x : f32 , y : f32 , z : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraLookUp ( cam : * mut RwCamera , x : f32 , y : f32 , z : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraNearClipping ( cam : * mut RwCamera , neard : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraPosition ( cam : * mut RwCamera , x : f32 , y : f32 , z : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraProjection ( cam : * mut RwCamera , kind : RwCameraProjection ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraRenderOffset ( cam : * mut RwCamera , x : RwInt32 , y : RwInt32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraViewOffset ( cam : * mut RwCamera , x : f32 , y : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraViewport ( cam : * mut RwCamera , x : RwInt32 , y : RwInt32 , w : RwInt32 , h : RwInt32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetCameraViewwindow ( cam : * mut RwCamera , w : f32 , h : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetClumpAxisAlignment ( clump : * mut RwClump , alignment : RwAxisAlignment ) -> * mut RwClump ; } extern "C" { pub fn RwSetClumpData ( clump : * mut RwClump , data : * mut :: std :: os :: raw :: c_void ) -> * mut RwClump ; } extern "C" { pub fn RwSetClumpHints ( clump : * mut RwClump , hints : RwClumpHints ) -> * mut RwClump ; } extern "C" { pub fn RwSetClumpImmediateCallBack ( clump : * mut RwClump , callback : RwClumpCallBack ) -> * mut RwClump ; } extern "C" { pub fn RwSetClumpLightSampleRate ( clump : * mut RwClump , rate : f32 ) -> f32 ; } extern "C" { pub fn RwSetClumpLocalBBox ( clump : * mut RwClump , bll : * mut RwV3d , fur : * mut RwV3d ) -> * mut RwClump ; } extern "C" { pub fn RwSetClumpOrder ( clump : * mut RwClump , order : * mut RwPolyList ) -> * mut RwPolyList ; } extern "C" { pub fn RwSetClumpState ( clump : * mut RwClump , onoff : RwState ) -> * mut RwClump ; } extern "C" { pub fn RwSetClumpTag ( clump : * mut RwClump , tag : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwSetClumpVertex ( clump : * mut RwClump , vindex : RwInt32 , vertex : * mut RwV3d ) -> * mut RwClump ; } extern "C" { pub fn RwSetClumpVertexNormal ( clump : * mut RwClump , vindex : RwInt32 , normal : * mut RwV3d ) -> * mut RwClump ; } extern "C" { pub fn RwSetClumpVertexUV ( clump : * mut RwClump , vindex : RwInt32 , u : f32 , v : f32 ) -> * mut RwClump ; } extern "C" { pub fn RwSetClumpVertices ( clump : * mut RwClump , vindex : * mut RwInt32 , vertex : * mut RwV3d , n : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn RwSetDebugAssertionState ( state : RwState ) ; } extern "C" { pub fn RwSetDebugMessageState ( state : RwState ) ; } extern "C" { pub fn RwSetDebugOutputState ( state : RwState ) ; } extern "C" { pub fn RwSetDebugScriptState ( state : RwState ) ; } extern "C" { pub fn RwSetDebugSeverity ( severity : RwDebugSeverity ) ; } extern "C" { pub fn RwSetDebugStream ( stream : * mut FILE ) -> RwInt32 ; } extern "C" { pub fn RwSetDebugTraceState ( state : RwState ) ; } extern "C" { pub fn RwSetDepthCueColor ( col : * mut RwDepthCueColor ) -> RwBool ; } extern "C" { pub fn RwSetDepthCueDistance ( d : f32 ) -> RwBool ; } extern "C" { pub fn RwSetDepthCueType ( t : RwDepthCueType ) -> RwBool ; } extern "C" { pub fn RwSetHints ( hints : RwClumpHints ) -> RwInt32 ; } extern "C" { pub fn RwSetImmediateZRange ( nNear : f32 , nFar : f32 ) ; } extern "C" { pub fn RwSetLightBrightness ( lite : * mut RwLight , lum : f32 ) -> * mut RwLight ; } extern "C" { pub fn RwSetLightColor ( l : * mut RwLight , r : f32 , g : f32 , b : f32 ) -> * mut RwLight ; } extern "C" { pub fn RwSetLightColorStruct ( l : * mut RwLight , color : * mut RwRGBColor ) -> * mut RwLight ; } extern "C" { pub fn RwSetLightConeAngle ( lite : * mut RwLight , theta : f32 ) -> * mut RwLight ; } extern "C" { pub fn RwSetLightData ( lite : * mut RwLight , data : * mut :: std :: os :: raw :: c_void ) -> * mut RwLight ; } extern "C" { pub fn RwSetLightPosition ( lite : * mut RwLight , x : f32 , y : f32 , z : f32 ) -> * mut RwLight ; } extern "C" { pub fn RwSetLightRadius ( l : * mut RwLight , rad : f32 ) -> * mut RwLight ; } extern "C" { pub fn RwSetLightState ( lite : * mut RwLight , state : RwState ) -> * mut RwLight ; } extern "C" { pub fn RwSetLightVector ( lite : * mut RwLight , x : f32 , y : f32 , z : f32 ) -> * mut RwLight ; } extern "C" { pub fn RwSetMaterialAmbient ( m : * mut RwMaterial , ka : f32 ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialAmbientRGB ( m : * mut RwMaterial , kar : f32 , kag : f32 , kab : f32 ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialAmbientRGBStruct ( m : * mut RwMaterial , ka : * mut RwRGBColor ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialColor ( m : * mut RwMaterial , r : f32 , g : f32 , b : f32 ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialColorStruct ( m : * mut RwMaterial , color : * mut RwRGBColor ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialData ( m : * mut RwMaterial , data : * mut :: std :: os :: raw :: c_void ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialDiffuse ( m : * mut RwMaterial , kd : f32 ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialDiffuseRGB ( m : * mut RwMaterial , kdr : f32 , kdg : f32 , kdb : f32 ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialDiffuseRGBStruct ( m : * mut RwMaterial , kd : * mut RwRGBColor ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialGeometrySampling ( m : * mut RwMaterial , t : RwGeometrySampling ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialLightSampling ( m : * mut RwMaterial , t : RwLightSampling ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialModes ( m : * mut RwMaterial , modes : RwMaterialModes ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialOpacity ( m : * mut RwMaterial , opacity : f32 ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialSpecular ( m : * mut RwMaterial , ks : f32 ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialSpecularRGB ( m : * mut RwMaterial , ksr : f32 , ksg : f32 , ksb : f32 ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialSpecularRGBStruct ( m : * mut RwMaterial , ks : * mut RwRGBColor ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialSurface ( m : * mut RwMaterial , ka : f32 , kd : f32 , ks : f32 ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialTexture ( m : * mut RwMaterial , what : * mut RwTexture ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMaterialTextureModes ( m : * mut RwMaterial , modes : RwTextureModes ) -> * mut RwMaterial ; } extern "C" { pub fn RwSetMatrixElement ( m : * mut RwMatrix4d , i : RwInt32 , j : RwInt32 , val : f32 ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwSetMatrixElements ( m : * mut RwMatrix4d , farray : * mut [ f32 ; 4usize ] ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwSetPaletteEntries ( n : RwInt32 , length : RwInt32 , rgb : * mut RwPaletteEntry , options : RwPaletteOptions ) -> RwInt32 ; } extern "C" { pub fn RwSetPolygonAmbient ( pol : * mut RwPolygon3d , Ka : f32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonAmbientRGB ( pol : * mut RwPolygon3d , Kar : f32 , Kag : f32 , Kab : f32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonAmbientRGBStruct ( pol : * mut RwPolygon3d , Ka : * mut RwRGBColor ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonColor ( pol : * mut RwPolygon3d , r : f32 , g : f32 , b : f32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonColorStruct ( pol : * mut RwPolygon3d , color : * mut RwRGBColor ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonData ( pol : * mut RwPolygon3d , data : * mut :: std :: os :: raw :: c_void ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonDiffuse ( pol : * mut RwPolygon3d , Kd : f32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonDiffuseRGB ( pol : * mut RwPolygon3d , Kdr : f32 , Kdg : f32 , Kdb : f32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonDiffuseRGBStruct ( pol : * mut RwPolygon3d , Kd : * mut RwRGBColor ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonGeometrySampling ( p : * mut RwPolygon3d , t : RwGeometrySampling ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonLightSampling ( p : * mut RwPolygon3d , t : RwLightSampling ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonMaterial ( p : * mut RwPolygon3d , m : * mut RwMaterial ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonMaterialModes ( apol : * mut RwPolygon3d , modes : RwMaterialModes ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonOpacity ( p : * mut RwPolygon3d , opacity : f32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonSpecular ( pol : * mut RwPolygon3d , Ks : f32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonSpecularRGB ( pol : * mut RwPolygon3d , Ksr : f32 , Ksg : f32 , Ksb : f32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonSpecularRGBStruct ( pol : * mut RwPolygon3d , Ks : * mut RwRGBColor ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonSurface ( pol : * mut RwPolygon3d , ka : f32 , kd : f32 , ks : f32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonTag ( pol : * mut RwPolygon3d , data : RwInt32 ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonTexture ( p : * mut RwPolygon3d , t : * mut RwTexture ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonTextureModes ( apol : * mut RwPolygon3d , modes : RwTextureModes ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetPolygonUV ( p : * mut RwPolygon3d , uv : * mut RwUV ) -> * mut RwPolygon3d ; } extern "C" { pub fn RwSetRasterData ( ras : * mut RwRaster , data : * mut :: std :: os :: raw :: c_void ) -> * mut RwRaster ; } extern "C" { pub fn RwSetSceneData ( arg1 : * mut RwScene , arg2 : * mut :: std :: os :: raw :: c_void ) -> * mut RwScene ; } extern "C" { pub fn RwSetShapePath ( path : * mut :: std :: os :: raw :: c_char , op : RwCombineOperation ) -> RwInt32 ; } extern "C" { pub fn RwSetSplineData ( spline : * mut RwSpline , data : * mut :: std :: os :: raw :: c_void ) -> * mut RwSpline ; } extern "C" { pub fn RwSetSplinePoint ( sp : * mut RwSpline , control : RwInt32 , point : * mut RwV3d ) -> * mut RwSpline ; } extern "C" { pub fn RwSetStereoCameraEyeSeparation ( c : * mut RwCamera , sep : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetStereoCameraFocalDistance ( c : * mut RwCamera , dist : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwSetStereoCameraMode ( c : * mut RwCamera , mode : RwStereoMode ) -> * mut RwCamera ; } extern "C" { pub fn RwSetSurface ( ka : f32 , kd : f32 , ks : f32 ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceAmbient ( ka : f32 ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceAmbientRGB ( kar : f32 , kag : f32 , kab : f32 ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceColor ( r : f32 , g : f32 , b : f32 ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceDiffuse ( kd : f32 ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceDiffuseRGB ( kdr : f32 , kdg : f32 , kdb : f32 ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceGeometrySampling ( sampling : RwGeometrySampling ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceLightSampling ( sampling : RwLightSampling ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceMaterialModes ( modes : RwMaterialModes ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceOpacity ( opacity : f32 ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceSpecular ( ks : f32 ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceSpecularRGB ( ksr : f32 , ksg : f32 , ksb : f32 ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceTexture ( name : * mut :: std :: os :: raw :: c_char ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceTextureExt ( texturename : * mut :: std :: os :: raw :: c_char , maskname : * mut :: std :: os :: raw :: c_char ) -> RwInt32 ; } extern "C" { pub fn RwSetSurfaceTextureModes ( modes : RwTextureModes ) -> RwInt32 ; } extern "C" { pub fn RwSetTag ( tag : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwSetTextureData ( texture : * mut RwTexture , data : * mut :: std :: os :: raw :: c_void ) -> * mut RwTexture ; } extern "C" { pub fn RwSetTextureDictSearchMode ( mode : RwSearchMode ) -> RwInt32 ; } extern "C" { pub fn RwSetTextureDithering ( mode : RwTextureDitherMode ) -> RwInt32 ; } extern "C" { pub fn RwSetTextureFrame ( t : * mut RwTexture , mindex : RwInt32 ) -> * mut RwTexture ; } extern "C" { pub fn RwSetTextureFrameStep ( t : * mut RwTexture , val : RwInt32 ) -> * mut RwTexture ; } extern "C" { pub fn RwSetTextureGammaCorrection ( state : RwState ) -> RwInt32 ; } extern "C" { pub fn RwSetTextureMipmapRaster ( texture : * mut RwTexture , raster : * mut RwRaster ) -> * mut RwTexture ; } extern "C" { pub fn RwSetTextureMipmapState ( state : RwState ) -> RwInt32 ; } extern "C" { pub fn RwSetTextureRaster ( texture : * mut RwTexture , raster : * mut RwRaster ) -> * mut RwTexture ; } extern "C" { pub fn RwSetUserDrawAlignment ( userdraw : * mut RwUserDraw , align : RwUserDrawAlignmentTypes ) -> * mut RwUserDraw ; } extern "C" { pub fn RwSetUserDrawCallback ( userdraw : * mut RwUserDraw , callback : RwUserDrawCallBack ) -> * mut RwUserDraw ; } extern "C" { pub fn RwSetUserDrawData ( userdraw : * mut RwUserDraw , data : * mut :: std :: os :: raw :: c_void ) -> * mut RwUserDraw ; } extern "C" { pub fn RwSetUserDrawOffset ( userdraw : * mut RwUserDraw , x : RwInt32 , y : RwInt32 ) -> * mut RwUserDraw ; } extern "C" { pub fn RwSetUserDrawParentAlignment ( userdraw : * mut RwUserDraw , align : RwUserDrawAlignmentTypes ) -> * mut RwUserDraw ; } extern "C" { pub fn RwSetUserDrawSize ( userdraw : * mut RwUserDraw , width : RwInt32 , height : RwInt32 ) -> * mut RwUserDraw ; } extern "C" { pub fn RwSetUserDrawType ( userdraw : * mut RwUserDraw , type_ : RwUserDrawType ) -> * mut RwUserDraw ; } extern "C" { pub fn RwSetUserDrawVertexIndex ( userdraw : * mut RwUserDraw , vindex : RwInt32 ) -> * mut RwUserDraw ; } extern "C" { pub fn RwSetUserRasterParameters ( rpRas : * mut RwRaster , stride : RwInt32 , pixels : * mut :: std :: os :: raw :: c_void ) -> RwBool ; } extern "C" { pub fn RwSetupImmediateLine ( imm : * mut RwImmediate ) -> * mut RwImmediate ; } extern "C" { pub fn RwSetupImmediateTriangle ( imm : * mut RwImmediate ) -> * mut RwImmediate ; } extern "C" { pub fn RwShowCameraImage ( cam : * mut RwCamera , param : * mut :: std :: os :: raw :: c_void ) -> * mut RwCamera ; } extern "C" { pub fn RwShowStereoCameraImage ( c : * mut RwCamera , param : * mut :: std :: os :: raw :: c_void ) -> * mut RwCamera ; } extern "C" { pub fn RwSkipStreamChunk ( stpStream : * mut RwStream ) -> RwBool ; } extern "C" { pub fn RwSphere ( radius : f32 , sides : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwSphericalTexturizeClump ( clump : * mut RwClump ) -> * mut RwClump ; } extern "C" { pub fn RwSplinePoint ( spline : * mut RwSpline , path : RwSplinePath , where_ : f32 , pt : * mut RwV3d , vec : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwSplineTransform ( sp : * mut RwSpline , path : RwSplinePath , where_ : f32 , up : * mut RwV3d , mat : * mut RwMatrix4d ) -> f32 ; } extern "C" { pub fn RwStartDisplayDevice ( dpDevice : * mut RwDisplayDevice , pParam : * mut :: std :: os :: raw :: c_void ) -> RwBool ; } extern "C" { pub fn RwStartDisplayDeviceExt ( dpDevice : * mut RwDisplayDevice , param : * mut :: std :: os :: raw :: c_void , numargs : RwInt32 , args : * mut RwOpenArgument ) -> RwBool ; } extern "C" { pub fn RwStopDisplayDevice ( dpDevice : * mut RwDisplayDevice ) -> RwBool ; } extern "C" { pub fn RwSubtractVector ( a : * mut RwV3d , b : * mut RwV3d , c : * mut RwV3d ) -> * mut RwV3d ; } extern "C" { pub fn RwTextureDictBegin ( ) -> RwInt32 ; } extern "C" { pub fn RwTextureDictEnd ( ) -> RwInt32 ; } extern "C" { pub fn RwTextureNextFrame ( t : * mut RwTexture ) -> * mut RwTexture ; } extern "C" { pub fn RwTiltCamera ( cam : * mut RwCamera , theta : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwTransformBegin ( ) -> RwInt32 ; } extern "C" { pub fn RwTransformCTM ( matrix : * mut RwMatrix4d ) -> RwInt32 ; } extern "C" { pub fn RwTransformCamera ( c : * mut RwCamera , m : * mut RwMatrix4d , op : RwCombineOperation ) -> * mut RwCamera ; } extern "C" { pub fn RwTransformCameraOrientation ( c : * mut RwCamera , m : * mut RwMatrix4d ) -> * mut RwCamera ; } extern "C" { pub fn RwTransformClump ( clump : * mut RwClump , m : * mut RwMatrix4d , op : RwCombineOperation ) -> * mut RwClump ; } extern "C" { pub fn RwTransformClumpJoint ( clump : * mut RwClump , matrix : * mut RwMatrix4d , op : RwCombineOperation ) -> * mut RwClump ; } extern "C" { pub fn RwTransformEnd ( ) -> RwInt32 ; } extern "C" { pub fn RwTransformJointTM ( matrix : * mut RwMatrix4d ) -> RwInt32 ; } extern "C" { pub fn RwTransformLight ( light : * mut RwLight , m : * mut RwMatrix4d , op : RwCombineOperation ) -> * mut RwLight ; } extern "C" { pub fn RwTransformMatrix ( m : * mut RwMatrix4d , mat : * mut RwMatrix4d , op : RwCombineOperation ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwTransformPoint ( a : * mut RwV3d , m : * mut RwMatrix4d ) -> * mut RwV3d ; } extern "C" { pub fn RwTransformVector ( a : * mut RwV3d , m : * mut RwMatrix4d ) -> * mut RwV3d ; } extern "C" { pub fn RwTranslateCTM ( tx : f32 , ty : f32 , tz : f32 ) -> RwInt32 ; } extern "C" { pub fn RwTranslateMatrix ( m : * mut RwMatrix4d , tx : f32 , ty : f32 , tz : f32 , op : RwCombineOperation ) -> * mut RwMatrix4d ; } extern "C" { pub fn RwTriangle ( v1 : RwInt32 , v2 : RwInt32 , v3 : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwTriangleExt ( v1 : RwInt32 , v2 : RwInt32 , v3 : RwInt32 , tag : RwInt32 ) -> RwInt32 ; } extern "C" { pub fn RwUndamageCameraViewport ( cam : * mut RwCamera , x : RwInt32 , y : RwInt32 , w : RwInt32 , h : RwInt32 ) -> * mut RwCamera ; } extern "C" { pub fn RwVCMoveCamera ( cam : * mut RwCamera , x : f32 , y : f32 , z : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwVertex ( x : f32 , y : f32 , z : f32 ) -> RwInt32 ; } extern "C" { pub fn RwVertexExt ( x : f32 , y : f32 , z : f32 , uv : * mut RwUV , normal : * mut RwV3d ) -> RwInt32 ; } extern "C" { pub fn RwWCMoveCamera ( cam : * mut RwCamera , x : f32 , y : f32 , z : f32 ) -> * mut RwCamera ; } extern "C" { pub fn RwWriteShape ( filename : * mut :: std :: os :: raw :: c_char , clump : * mut RwClump ) -> RwInt32 ; } extern "C" { pub fn RwWriteStream ( stpStream : * mut RwStream , pBuffer : * mut :: std :: os :: raw :: c_void , nLength : RwUInt32 ) -> RwBool ; } extern "C" { pub fn RwWriteStreamChunk ( stpStream : * mut RwStream , nType : RwUInt32 , pData : * mut :: std :: os :: raw :: c_void , nFlags : RwUInt32 ) -> RwBool ; } extern "C" { pub fn RwWriteStreamChunkHeader ( stpStream : * mut RwStream , nType : RwInt32 , nBytes : RwInt32 ) -> RwBool ; } extern "C" { pub fn RwWriteStreamInt ( stpStream : * mut RwStream , npInt : * mut RwInt32 , nBytes : RwInt32 ) -> RwBool ; } extern "C" { pub fn RwWriteStreamReal ( stpStream : * mut RwStream , npReals : * mut f32 , nBytes : RwInt32 ) -> RwBool ; } extern "C" { pub fn _rwPlaneProjectDirectionMatrix ( m : * mut RwMatrix4d , normal_x : f32 , normal_y : f32 , normal_z : f32 , normal_w : f32 , direction_x : f32 , direction_y : f32 , direction_z : f32 , op : RwCombineOperation ) -> * mut RwMatrix4d ; } extern "C" { pub fn _rwPlaneProjectPointMatrix ( m : * mut RwMatrix4d , normal_x : f32 , normal_y : f32 , normal_z : f32 , normal_w : f32 , point_x : f32 , point_y : f32 , point_z : f32 , op : RwCombineOperation ) -> * mut RwMatrix4d ; } extern "C" { pub fn _rwSetClumpVertices ( clump : * mut RwClump , vindex : * mut RwInt32 , vertex : * mut RwV3d , n : RwInt32 ) -> * mut RwClump ; } extern "C" { pub fn _rwTransformHomogeneousPoint ( a : * mut RwV3d , m : * mut RwMatrix4d ) -> * mut RwV3d ; }